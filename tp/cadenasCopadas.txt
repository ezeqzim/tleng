./CLambda '0'
./CLambda 'true'
./CLambda 'if true then 0 else false'
./CLambda '\x:Bool. if x then false else true'
./CLambda '\x:Nat.succ(0)'
./CLambda '\z:Nat.z'
./CLambda '(\x:Bool.succ(x)) true'
./CLambda 'succ(succ(succ(0)))'
./CLambda 'x'
./CLambda 'succ(succ(pred(0)))'
./CLambda '\x:Nat.succ(x)'
./CLambda '0 0'
./CLambda '(\x:Nat -> Nat.\y:Nat.(\z:Bool.if z then x y else 0))'
./CLambda '(\x:Nat -> Nat.\y:Nat.(\z:Bool.if z then x y else 0)) (\j:Nat.succ(j)) succ(succ(succ(succ(succ(succ(succ(succ(0)))))))) true'
./CLambda '(\x:Nat.true) if true then (\x:Nat.succ(0)) 0 else (\x:Nat.succ(0)) 0'
./CLambda '(\x:Nat.true) (if true then (\y:Nat.succ(0)) 0 else (\z:Nat.succ(0)) 0)'
./CLambda '\x:Nat.succ(0) 0'
./CLambda 'if true then \x:Nat.succ(0) 0 else \x:Nat.succ(0) 0'
./CLambda '\x:Nat.iszero(0)'
./CLambda '\x:Bool. if x then pred(0) else 0'
./CLambda '(\x:Nat.true) x'
./CLambda '(\x:Bool -> Bool.\y:Nat.(\z:Bool.if z then x y else true))'
./CLambda '(\x:Nat -> Nat -> Nat.\y:Nat->Nat. x y) (\j:Nat->Nat.0) (\z:Nat.succ(0))'
./CLambda '(\x:Nat -> Nat -> Nat.\y:Nat->Nat. x y) (\j:Nat->Nat.succ(0))'
./CLambda '(\x:Nat -> Nat -> Nat.\y:Nat->Nat. x y) (\j:Nat->Nat.j 0) (\z:Nat.succ(z))'

./CLambda '(\x:Nat -> Nat -> Nat.\y:Nat->Nat. x y) (\j:Nat->Nat.\c:Nat.j c) (\z:Nat.0)'
./CLambda '(\x:Nat -> Nat -> Nat.\y:Nat->Nat. x y) (\j:Nat.\c:Nat.succ(0)) (\z:Nat.0)'
./CLambda '(\x:Nat -> Nat -> Nat.\y:Nat->Nat. x y) (\j:Nat.\c:Bool.\k:Bool.true) (\z:Nat.0)'
./CLambda '(\x:Nat -> Nat -> Nat.\y:Nat->Nat. x y) (\j:Nat.\c:Nat.\k:Bool.succ(0)) (\z:Nat.0)'
./CLambda '(\x:Nat -> Nat -> Nat.\y:Nat. x y) (\j:Nat.\c:Nat.c) 0'
