Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> zero
Rule 2     expression -> boolean
Rule 3     expression -> IF expression THEN expression ELSE expression
Rule 4     expression -> OPENBRACKET expression CLOSEDBRACKET
Rule 5     expression -> VAR
Rule 6     expression -> application
Rule 7     expression -> SUCC OPENBRACKET expression CLOSEDBRACKET
Rule 8     expression -> PRED OPENBRACKET expression CLOSEDBRACKET
Rule 9     expression -> ISZERO OPENBRACKET expression CLOSEDBRACKET
Rule 10    zero -> ZERO
Rule 11    boolean -> TRUE
Rule 12    boolean -> FALSE
Rule 13    abstraction -> LAMBDA VAR COLON type POINT expression
Rule 14    type -> BOOL rectype
Rule 15    type -> NAT rectype
Rule 16    rectype -> ARROW type
Rule 17    rectype -> <empty>
Rule 18    application -> abstraction expression

Terminals, with rules where they appear

ARROW                : 16
BOOL                 : 14
CLOSEDBRACKET        : 4 7 8 9
COLON                : 13
ELSE                 : 3
FALSE                : 12
IF                   : 3
ISZERO               : 9
LAMBDA               : 13
NAT                  : 15
OPENBRACKET          : 4 7 8 9
POINT                : 13
PRED                 : 8
SUCC                 : 7
THEN                 : 3
TRUE                 : 11
VAR                  : 5 13
ZERO                 : 10
error                : 

Nonterminals, with rules where they appear

abstraction          : 18
application          : 6
boolean              : 2
expression           : 3 3 3 4 7 8 9 13 18 0
rectype              : 14 15
type                 : 13 16
zero                 : 1

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . zero
    (2) expression -> . boolean
    (3) expression -> . IF expression THEN expression ELSE expression
    (4) expression -> . OPENBRACKET expression CLOSEDBRACKET
    (5) expression -> . VAR
    (6) expression -> . application
    (7) expression -> . SUCC OPENBRACKET expression CLOSEDBRACKET
    (8) expression -> . PRED OPENBRACKET expression CLOSEDBRACKET
    (9) expression -> . ISZERO OPENBRACKET expression CLOSEDBRACKET
    (10) zero -> . ZERO
    (11) boolean -> . TRUE
    (12) boolean -> . FALSE
    (18) application -> . abstraction expression
    (13) abstraction -> . LAMBDA VAR COLON type POINT expression

    IF              shift and go to state 15
    OPENBRACKET     shift and go to state 4
    VAR             shift and go to state 11
    SUCC            shift and go to state 6
    PRED            shift and go to state 10
    ISZERO          shift and go to state 1
    ZERO            shift and go to state 5
    TRUE            shift and go to state 14
    FALSE           shift and go to state 3
    LAMBDA          shift and go to state 12

    abstraction                    shift and go to state 2
    application                    shift and go to state 7
    zero                           shift and go to state 8
    boolean                        shift and go to state 9
    expression                     shift and go to state 13

state 1

    (9) expression -> ISZERO . OPENBRACKET expression CLOSEDBRACKET

    OPENBRACKET     shift and go to state 16


state 2

    (18) application -> abstraction . expression
    (1) expression -> . zero
    (2) expression -> . boolean
    (3) expression -> . IF expression THEN expression ELSE expression
    (4) expression -> . OPENBRACKET expression CLOSEDBRACKET
    (5) expression -> . VAR
    (6) expression -> . application
    (7) expression -> . SUCC OPENBRACKET expression CLOSEDBRACKET
    (8) expression -> . PRED OPENBRACKET expression CLOSEDBRACKET
    (9) expression -> . ISZERO OPENBRACKET expression CLOSEDBRACKET
    (10) zero -> . ZERO
    (11) boolean -> . TRUE
    (12) boolean -> . FALSE
    (18) application -> . abstraction expression
    (13) abstraction -> . LAMBDA VAR COLON type POINT expression

    IF              shift and go to state 15
    OPENBRACKET     shift and go to state 4
    VAR             shift and go to state 11
    SUCC            shift and go to state 6
    PRED            shift and go to state 10
    ISZERO          shift and go to state 1
    ZERO            shift and go to state 5
    TRUE            shift and go to state 14
    FALSE           shift and go to state 3
    LAMBDA          shift and go to state 12

    abstraction                    shift and go to state 2
    application                    shift and go to state 7
    zero                           shift and go to state 8
    boolean                        shift and go to state 9
    expression                     shift and go to state 17

state 3

    (12) boolean -> FALSE .

    THEN            reduce using rule 12 (boolean -> FALSE .)
    CLOSEDBRACKET   reduce using rule 12 (boolean -> FALSE .)
    ELSE            reduce using rule 12 (boolean -> FALSE .)
    $end            reduce using rule 12 (boolean -> FALSE .)
    IF              reduce using rule 12 (boolean -> FALSE .)
    OPENBRACKET     reduce using rule 12 (boolean -> FALSE .)
    VAR             reduce using rule 12 (boolean -> FALSE .)
    SUCC            reduce using rule 12 (boolean -> FALSE .)
    PRED            reduce using rule 12 (boolean -> FALSE .)
    ISZERO          reduce using rule 12 (boolean -> FALSE .)
    ZERO            reduce using rule 12 (boolean -> FALSE .)
    TRUE            reduce using rule 12 (boolean -> FALSE .)
    FALSE           reduce using rule 12 (boolean -> FALSE .)
    LAMBDA          reduce using rule 12 (boolean -> FALSE .)


state 4

    (4) expression -> OPENBRACKET . expression CLOSEDBRACKET
    (1) expression -> . zero
    (2) expression -> . boolean
    (3) expression -> . IF expression THEN expression ELSE expression
    (4) expression -> . OPENBRACKET expression CLOSEDBRACKET
    (5) expression -> . VAR
    (6) expression -> . application
    (7) expression -> . SUCC OPENBRACKET expression CLOSEDBRACKET
    (8) expression -> . PRED OPENBRACKET expression CLOSEDBRACKET
    (9) expression -> . ISZERO OPENBRACKET expression CLOSEDBRACKET
    (10) zero -> . ZERO
    (11) boolean -> . TRUE
    (12) boolean -> . FALSE
    (18) application -> . abstraction expression
    (13) abstraction -> . LAMBDA VAR COLON type POINT expression

    IF              shift and go to state 15
    OPENBRACKET     shift and go to state 4
    VAR             shift and go to state 11
    SUCC            shift and go to state 6
    PRED            shift and go to state 10
    ISZERO          shift and go to state 1
    ZERO            shift and go to state 5
    TRUE            shift and go to state 14
    FALSE           shift and go to state 3
    LAMBDA          shift and go to state 12

    abstraction                    shift and go to state 2
    application                    shift and go to state 7
    zero                           shift and go to state 8
    boolean                        shift and go to state 9
    expression                     shift and go to state 18

state 5

    (10) zero -> ZERO .

    ELSE            reduce using rule 10 (zero -> ZERO .)
    $end            reduce using rule 10 (zero -> ZERO .)
    CLOSEDBRACKET   reduce using rule 10 (zero -> ZERO .)
    THEN            reduce using rule 10 (zero -> ZERO .)
    IF              reduce using rule 10 (zero -> ZERO .)
    OPENBRACKET     reduce using rule 10 (zero -> ZERO .)
    VAR             reduce using rule 10 (zero -> ZERO .)
    SUCC            reduce using rule 10 (zero -> ZERO .)
    PRED            reduce using rule 10 (zero -> ZERO .)
    ISZERO          reduce using rule 10 (zero -> ZERO .)
    ZERO            reduce using rule 10 (zero -> ZERO .)
    TRUE            reduce using rule 10 (zero -> ZERO .)
    FALSE           reduce using rule 10 (zero -> ZERO .)
    LAMBDA          reduce using rule 10 (zero -> ZERO .)


state 6

    (7) expression -> SUCC . OPENBRACKET expression CLOSEDBRACKET

    OPENBRACKET     shift and go to state 19


state 7

    (6) expression -> application .

    $end            reduce using rule 6 (expression -> application .)
    CLOSEDBRACKET   reduce using rule 6 (expression -> application .)
    THEN            reduce using rule 6 (expression -> application .)
    ELSE            reduce using rule 6 (expression -> application .)
    IF              reduce using rule 6 (expression -> application .)
    OPENBRACKET     reduce using rule 6 (expression -> application .)
    VAR             reduce using rule 6 (expression -> application .)
    SUCC            reduce using rule 6 (expression -> application .)
    PRED            reduce using rule 6 (expression -> application .)
    ISZERO          reduce using rule 6 (expression -> application .)
    ZERO            reduce using rule 6 (expression -> application .)
    TRUE            reduce using rule 6 (expression -> application .)
    FALSE           reduce using rule 6 (expression -> application .)
    LAMBDA          reduce using rule 6 (expression -> application .)


state 8

    (1) expression -> zero .

    $end            reduce using rule 1 (expression -> zero .)
    CLOSEDBRACKET   reduce using rule 1 (expression -> zero .)
    THEN            reduce using rule 1 (expression -> zero .)
    ELSE            reduce using rule 1 (expression -> zero .)
    IF              reduce using rule 1 (expression -> zero .)
    OPENBRACKET     reduce using rule 1 (expression -> zero .)
    VAR             reduce using rule 1 (expression -> zero .)
    SUCC            reduce using rule 1 (expression -> zero .)
    PRED            reduce using rule 1 (expression -> zero .)
    ISZERO          reduce using rule 1 (expression -> zero .)
    ZERO            reduce using rule 1 (expression -> zero .)
    TRUE            reduce using rule 1 (expression -> zero .)
    FALSE           reduce using rule 1 (expression -> zero .)
    LAMBDA          reduce using rule 1 (expression -> zero .)


state 9

    (2) expression -> boolean .

    $end            reduce using rule 2 (expression -> boolean .)
    CLOSEDBRACKET   reduce using rule 2 (expression -> boolean .)
    THEN            reduce using rule 2 (expression -> boolean .)
    ELSE            reduce using rule 2 (expression -> boolean .)
    IF              reduce using rule 2 (expression -> boolean .)
    OPENBRACKET     reduce using rule 2 (expression -> boolean .)
    VAR             reduce using rule 2 (expression -> boolean .)
    SUCC            reduce using rule 2 (expression -> boolean .)
    PRED            reduce using rule 2 (expression -> boolean .)
    ISZERO          reduce using rule 2 (expression -> boolean .)
    ZERO            reduce using rule 2 (expression -> boolean .)
    TRUE            reduce using rule 2 (expression -> boolean .)
    FALSE           reduce using rule 2 (expression -> boolean .)
    LAMBDA          reduce using rule 2 (expression -> boolean .)


state 10

    (8) expression -> PRED . OPENBRACKET expression CLOSEDBRACKET

    OPENBRACKET     shift and go to state 20


state 11

    (5) expression -> VAR .

    $end            reduce using rule 5 (expression -> VAR .)
    CLOSEDBRACKET   reduce using rule 5 (expression -> VAR .)
    THEN            reduce using rule 5 (expression -> VAR .)
    ELSE            reduce using rule 5 (expression -> VAR .)
    IF              reduce using rule 5 (expression -> VAR .)
    OPENBRACKET     reduce using rule 5 (expression -> VAR .)
    VAR             reduce using rule 5 (expression -> VAR .)
    SUCC            reduce using rule 5 (expression -> VAR .)
    PRED            reduce using rule 5 (expression -> VAR .)
    ISZERO          reduce using rule 5 (expression -> VAR .)
    ZERO            reduce using rule 5 (expression -> VAR .)
    TRUE            reduce using rule 5 (expression -> VAR .)
    FALSE           reduce using rule 5 (expression -> VAR .)
    LAMBDA          reduce using rule 5 (expression -> VAR .)


state 12

    (13) abstraction -> LAMBDA . VAR COLON type POINT expression

    VAR             shift and go to state 21


state 13

    (0) S' -> expression .



state 14

    (11) boolean -> TRUE .

    THEN            reduce using rule 11 (boolean -> TRUE .)
    CLOSEDBRACKET   reduce using rule 11 (boolean -> TRUE .)
    ELSE            reduce using rule 11 (boolean -> TRUE .)
    $end            reduce using rule 11 (boolean -> TRUE .)
    IF              reduce using rule 11 (boolean -> TRUE .)
    OPENBRACKET     reduce using rule 11 (boolean -> TRUE .)
    VAR             reduce using rule 11 (boolean -> TRUE .)
    SUCC            reduce using rule 11 (boolean -> TRUE .)
    PRED            reduce using rule 11 (boolean -> TRUE .)
    ISZERO          reduce using rule 11 (boolean -> TRUE .)
    ZERO            reduce using rule 11 (boolean -> TRUE .)
    TRUE            reduce using rule 11 (boolean -> TRUE .)
    FALSE           reduce using rule 11 (boolean -> TRUE .)
    LAMBDA          reduce using rule 11 (boolean -> TRUE .)


state 15

    (3) expression -> IF . expression THEN expression ELSE expression
    (1) expression -> . zero
    (2) expression -> . boolean
    (3) expression -> . IF expression THEN expression ELSE expression
    (4) expression -> . OPENBRACKET expression CLOSEDBRACKET
    (5) expression -> . VAR
    (6) expression -> . application
    (7) expression -> . SUCC OPENBRACKET expression CLOSEDBRACKET
    (8) expression -> . PRED OPENBRACKET expression CLOSEDBRACKET
    (9) expression -> . ISZERO OPENBRACKET expression CLOSEDBRACKET
    (10) zero -> . ZERO
    (11) boolean -> . TRUE
    (12) boolean -> . FALSE
    (18) application -> . abstraction expression
    (13) abstraction -> . LAMBDA VAR COLON type POINT expression

    IF              shift and go to state 15
    OPENBRACKET     shift and go to state 4
    VAR             shift and go to state 11
    SUCC            shift and go to state 6
    PRED            shift and go to state 10
    ISZERO          shift and go to state 1
    ZERO            shift and go to state 5
    TRUE            shift and go to state 14
    FALSE           shift and go to state 3
    LAMBDA          shift and go to state 12

    abstraction                    shift and go to state 2
    application                    shift and go to state 7
    zero                           shift and go to state 8
    boolean                        shift and go to state 9
    expression                     shift and go to state 22

state 16

    (9) expression -> ISZERO OPENBRACKET . expression CLOSEDBRACKET
    (1) expression -> . zero
    (2) expression -> . boolean
    (3) expression -> . IF expression THEN expression ELSE expression
    (4) expression -> . OPENBRACKET expression CLOSEDBRACKET
    (5) expression -> . VAR
    (6) expression -> . application
    (7) expression -> . SUCC OPENBRACKET expression CLOSEDBRACKET
    (8) expression -> . PRED OPENBRACKET expression CLOSEDBRACKET
    (9) expression -> . ISZERO OPENBRACKET expression CLOSEDBRACKET
    (10) zero -> . ZERO
    (11) boolean -> . TRUE
    (12) boolean -> . FALSE
    (18) application -> . abstraction expression
    (13) abstraction -> . LAMBDA VAR COLON type POINT expression

    IF              shift and go to state 15
    OPENBRACKET     shift and go to state 4
    VAR             shift and go to state 11
    SUCC            shift and go to state 6
    PRED            shift and go to state 10
    ISZERO          shift and go to state 1
    ZERO            shift and go to state 5
    TRUE            shift and go to state 14
    FALSE           shift and go to state 3
    LAMBDA          shift and go to state 12

    abstraction                    shift and go to state 2
    application                    shift and go to state 7
    zero                           shift and go to state 8
    boolean                        shift and go to state 9
    expression                     shift and go to state 23

state 17

    (18) application -> abstraction expression .

    CLOSEDBRACKET   reduce using rule 18 (application -> abstraction expression .)
    $end            reduce using rule 18 (application -> abstraction expression .)
    THEN            reduce using rule 18 (application -> abstraction expression .)
    ELSE            reduce using rule 18 (application -> abstraction expression .)
    IF              reduce using rule 18 (application -> abstraction expression .)
    OPENBRACKET     reduce using rule 18 (application -> abstraction expression .)
    VAR             reduce using rule 18 (application -> abstraction expression .)
    SUCC            reduce using rule 18 (application -> abstraction expression .)
    PRED            reduce using rule 18 (application -> abstraction expression .)
    ISZERO          reduce using rule 18 (application -> abstraction expression .)
    ZERO            reduce using rule 18 (application -> abstraction expression .)
    TRUE            reduce using rule 18 (application -> abstraction expression .)
    FALSE           reduce using rule 18 (application -> abstraction expression .)
    LAMBDA          reduce using rule 18 (application -> abstraction expression .)


state 18

    (4) expression -> OPENBRACKET expression . CLOSEDBRACKET

    CLOSEDBRACKET   shift and go to state 24


state 19

    (7) expression -> SUCC OPENBRACKET . expression CLOSEDBRACKET
    (1) expression -> . zero
    (2) expression -> . boolean
    (3) expression -> . IF expression THEN expression ELSE expression
    (4) expression -> . OPENBRACKET expression CLOSEDBRACKET
    (5) expression -> . VAR
    (6) expression -> . application
    (7) expression -> . SUCC OPENBRACKET expression CLOSEDBRACKET
    (8) expression -> . PRED OPENBRACKET expression CLOSEDBRACKET
    (9) expression -> . ISZERO OPENBRACKET expression CLOSEDBRACKET
    (10) zero -> . ZERO
    (11) boolean -> . TRUE
    (12) boolean -> . FALSE
    (18) application -> . abstraction expression
    (13) abstraction -> . LAMBDA VAR COLON type POINT expression

    IF              shift and go to state 15
    OPENBRACKET     shift and go to state 4
    VAR             shift and go to state 11
    SUCC            shift and go to state 6
    PRED            shift and go to state 10
    ISZERO          shift and go to state 1
    ZERO            shift and go to state 5
    TRUE            shift and go to state 14
    FALSE           shift and go to state 3
    LAMBDA          shift and go to state 12

    abstraction                    shift and go to state 2
    application                    shift and go to state 7
    zero                           shift and go to state 8
    boolean                        shift and go to state 9
    expression                     shift and go to state 25

state 20

    (8) expression -> PRED OPENBRACKET . expression CLOSEDBRACKET
    (1) expression -> . zero
    (2) expression -> . boolean
    (3) expression -> . IF expression THEN expression ELSE expression
    (4) expression -> . OPENBRACKET expression CLOSEDBRACKET
    (5) expression -> . VAR
    (6) expression -> . application
    (7) expression -> . SUCC OPENBRACKET expression CLOSEDBRACKET
    (8) expression -> . PRED OPENBRACKET expression CLOSEDBRACKET
    (9) expression -> . ISZERO OPENBRACKET expression CLOSEDBRACKET
    (10) zero -> . ZERO
    (11) boolean -> . TRUE
    (12) boolean -> . FALSE
    (18) application -> . abstraction expression
    (13) abstraction -> . LAMBDA VAR COLON type POINT expression

    IF              shift and go to state 15
    OPENBRACKET     shift and go to state 4
    VAR             shift and go to state 11
    SUCC            shift and go to state 6
    PRED            shift and go to state 10
    ISZERO          shift and go to state 1
    ZERO            shift and go to state 5
    TRUE            shift and go to state 14
    FALSE           shift and go to state 3
    LAMBDA          shift and go to state 12

    abstraction                    shift and go to state 2
    application                    shift and go to state 7
    zero                           shift and go to state 8
    boolean                        shift and go to state 9
    expression                     shift and go to state 26

state 21

    (13) abstraction -> LAMBDA VAR . COLON type POINT expression

    COLON           shift and go to state 27


state 22

    (3) expression -> IF expression . THEN expression ELSE expression

    THEN            shift and go to state 28


state 23

    (9) expression -> ISZERO OPENBRACKET expression . CLOSEDBRACKET

    CLOSEDBRACKET   shift and go to state 29


state 24

    (4) expression -> OPENBRACKET expression CLOSEDBRACKET .

    $end            reduce using rule 4 (expression -> OPENBRACKET expression CLOSEDBRACKET .)
    CLOSEDBRACKET   reduce using rule 4 (expression -> OPENBRACKET expression CLOSEDBRACKET .)
    THEN            reduce using rule 4 (expression -> OPENBRACKET expression CLOSEDBRACKET .)
    ELSE            reduce using rule 4 (expression -> OPENBRACKET expression CLOSEDBRACKET .)
    IF              reduce using rule 4 (expression -> OPENBRACKET expression CLOSEDBRACKET .)
    OPENBRACKET     reduce using rule 4 (expression -> OPENBRACKET expression CLOSEDBRACKET .)
    VAR             reduce using rule 4 (expression -> OPENBRACKET expression CLOSEDBRACKET .)
    SUCC            reduce using rule 4 (expression -> OPENBRACKET expression CLOSEDBRACKET .)
    PRED            reduce using rule 4 (expression -> OPENBRACKET expression CLOSEDBRACKET .)
    ISZERO          reduce using rule 4 (expression -> OPENBRACKET expression CLOSEDBRACKET .)
    ZERO            reduce using rule 4 (expression -> OPENBRACKET expression CLOSEDBRACKET .)
    TRUE            reduce using rule 4 (expression -> OPENBRACKET expression CLOSEDBRACKET .)
    FALSE           reduce using rule 4 (expression -> OPENBRACKET expression CLOSEDBRACKET .)
    LAMBDA          reduce using rule 4 (expression -> OPENBRACKET expression CLOSEDBRACKET .)


state 25

    (7) expression -> SUCC OPENBRACKET expression . CLOSEDBRACKET

    CLOSEDBRACKET   shift and go to state 30


state 26

    (8) expression -> PRED OPENBRACKET expression . CLOSEDBRACKET

    CLOSEDBRACKET   shift and go to state 31


state 27

    (13) abstraction -> LAMBDA VAR COLON . type POINT expression
    (14) type -> . BOOL rectype
    (15) type -> . NAT rectype

    BOOL            shift and go to state 33
    NAT             shift and go to state 32

    type                           shift and go to state 34

state 28

    (3) expression -> IF expression THEN . expression ELSE expression
    (1) expression -> . zero
    (2) expression -> . boolean
    (3) expression -> . IF expression THEN expression ELSE expression
    (4) expression -> . OPENBRACKET expression CLOSEDBRACKET
    (5) expression -> . VAR
    (6) expression -> . application
    (7) expression -> . SUCC OPENBRACKET expression CLOSEDBRACKET
    (8) expression -> . PRED OPENBRACKET expression CLOSEDBRACKET
    (9) expression -> . ISZERO OPENBRACKET expression CLOSEDBRACKET
    (10) zero -> . ZERO
    (11) boolean -> . TRUE
    (12) boolean -> . FALSE
    (18) application -> . abstraction expression
    (13) abstraction -> . LAMBDA VAR COLON type POINT expression

    IF              shift and go to state 15
    OPENBRACKET     shift and go to state 4
    VAR             shift and go to state 11
    SUCC            shift and go to state 6
    PRED            shift and go to state 10
    ISZERO          shift and go to state 1
    ZERO            shift and go to state 5
    TRUE            shift and go to state 14
    FALSE           shift and go to state 3
    LAMBDA          shift and go to state 12

    abstraction                    shift and go to state 2
    application                    shift and go to state 7
    zero                           shift and go to state 8
    boolean                        shift and go to state 9
    expression                     shift and go to state 35

state 29

    (9) expression -> ISZERO OPENBRACKET expression CLOSEDBRACKET .

    $end            reduce using rule 9 (expression -> ISZERO OPENBRACKET expression CLOSEDBRACKET .)
    CLOSEDBRACKET   reduce using rule 9 (expression -> ISZERO OPENBRACKET expression CLOSEDBRACKET .)
    THEN            reduce using rule 9 (expression -> ISZERO OPENBRACKET expression CLOSEDBRACKET .)
    ELSE            reduce using rule 9 (expression -> ISZERO OPENBRACKET expression CLOSEDBRACKET .)
    IF              reduce using rule 9 (expression -> ISZERO OPENBRACKET expression CLOSEDBRACKET .)
    OPENBRACKET     reduce using rule 9 (expression -> ISZERO OPENBRACKET expression CLOSEDBRACKET .)
    VAR             reduce using rule 9 (expression -> ISZERO OPENBRACKET expression CLOSEDBRACKET .)
    SUCC            reduce using rule 9 (expression -> ISZERO OPENBRACKET expression CLOSEDBRACKET .)
    PRED            reduce using rule 9 (expression -> ISZERO OPENBRACKET expression CLOSEDBRACKET .)
    ISZERO          reduce using rule 9 (expression -> ISZERO OPENBRACKET expression CLOSEDBRACKET .)
    ZERO            reduce using rule 9 (expression -> ISZERO OPENBRACKET expression CLOSEDBRACKET .)
    TRUE            reduce using rule 9 (expression -> ISZERO OPENBRACKET expression CLOSEDBRACKET .)
    FALSE           reduce using rule 9 (expression -> ISZERO OPENBRACKET expression CLOSEDBRACKET .)
    LAMBDA          reduce using rule 9 (expression -> ISZERO OPENBRACKET expression CLOSEDBRACKET .)


state 30

    (7) expression -> SUCC OPENBRACKET expression CLOSEDBRACKET .

    $end            reduce using rule 7 (expression -> SUCC OPENBRACKET expression CLOSEDBRACKET .)
    CLOSEDBRACKET   reduce using rule 7 (expression -> SUCC OPENBRACKET expression CLOSEDBRACKET .)
    THEN            reduce using rule 7 (expression -> SUCC OPENBRACKET expression CLOSEDBRACKET .)
    ELSE            reduce using rule 7 (expression -> SUCC OPENBRACKET expression CLOSEDBRACKET .)
    IF              reduce using rule 7 (expression -> SUCC OPENBRACKET expression CLOSEDBRACKET .)
    OPENBRACKET     reduce using rule 7 (expression -> SUCC OPENBRACKET expression CLOSEDBRACKET .)
    VAR             reduce using rule 7 (expression -> SUCC OPENBRACKET expression CLOSEDBRACKET .)
    SUCC            reduce using rule 7 (expression -> SUCC OPENBRACKET expression CLOSEDBRACKET .)
    PRED            reduce using rule 7 (expression -> SUCC OPENBRACKET expression CLOSEDBRACKET .)
    ISZERO          reduce using rule 7 (expression -> SUCC OPENBRACKET expression CLOSEDBRACKET .)
    ZERO            reduce using rule 7 (expression -> SUCC OPENBRACKET expression CLOSEDBRACKET .)
    TRUE            reduce using rule 7 (expression -> SUCC OPENBRACKET expression CLOSEDBRACKET .)
    FALSE           reduce using rule 7 (expression -> SUCC OPENBRACKET expression CLOSEDBRACKET .)
    LAMBDA          reduce using rule 7 (expression -> SUCC OPENBRACKET expression CLOSEDBRACKET .)


state 31

    (8) expression -> PRED OPENBRACKET expression CLOSEDBRACKET .

    $end            reduce using rule 8 (expression -> PRED OPENBRACKET expression CLOSEDBRACKET .)
    CLOSEDBRACKET   reduce using rule 8 (expression -> PRED OPENBRACKET expression CLOSEDBRACKET .)
    THEN            reduce using rule 8 (expression -> PRED OPENBRACKET expression CLOSEDBRACKET .)
    ELSE            reduce using rule 8 (expression -> PRED OPENBRACKET expression CLOSEDBRACKET .)
    IF              reduce using rule 8 (expression -> PRED OPENBRACKET expression CLOSEDBRACKET .)
    OPENBRACKET     reduce using rule 8 (expression -> PRED OPENBRACKET expression CLOSEDBRACKET .)
    VAR             reduce using rule 8 (expression -> PRED OPENBRACKET expression CLOSEDBRACKET .)
    SUCC            reduce using rule 8 (expression -> PRED OPENBRACKET expression CLOSEDBRACKET .)
    PRED            reduce using rule 8 (expression -> PRED OPENBRACKET expression CLOSEDBRACKET .)
    ISZERO          reduce using rule 8 (expression -> PRED OPENBRACKET expression CLOSEDBRACKET .)
    ZERO            reduce using rule 8 (expression -> PRED OPENBRACKET expression CLOSEDBRACKET .)
    TRUE            reduce using rule 8 (expression -> PRED OPENBRACKET expression CLOSEDBRACKET .)
    FALSE           reduce using rule 8 (expression -> PRED OPENBRACKET expression CLOSEDBRACKET .)
    LAMBDA          reduce using rule 8 (expression -> PRED OPENBRACKET expression CLOSEDBRACKET .)


state 32

    (15) type -> NAT . rectype
    (16) rectype -> . ARROW type
    (17) rectype -> .

    ARROW           shift and go to state 36
    POINT           reduce using rule 17 (rectype -> .)

    rectype                        shift and go to state 37

state 33

    (14) type -> BOOL . rectype
    (16) rectype -> . ARROW type
    (17) rectype -> .

    ARROW           shift and go to state 36
    POINT           reduce using rule 17 (rectype -> .)

    rectype                        shift and go to state 38

state 34

    (13) abstraction -> LAMBDA VAR COLON type . POINT expression

    POINT           shift and go to state 39


state 35

    (3) expression -> IF expression THEN expression . ELSE expression

    ELSE            shift and go to state 40


state 36

    (16) rectype -> ARROW . type
    (14) type -> . BOOL rectype
    (15) type -> . NAT rectype

    BOOL            shift and go to state 33
    NAT             shift and go to state 32

    type                           shift and go to state 41

state 37

    (15) type -> NAT rectype .

    POINT           reduce using rule 15 (type -> NAT rectype .)


state 38

    (14) type -> BOOL rectype .

    POINT           reduce using rule 14 (type -> BOOL rectype .)


state 39

    (13) abstraction -> LAMBDA VAR COLON type POINT . expression
    (1) expression -> . zero
    (2) expression -> . boolean
    (3) expression -> . IF expression THEN expression ELSE expression
    (4) expression -> . OPENBRACKET expression CLOSEDBRACKET
    (5) expression -> . VAR
    (6) expression -> . application
    (7) expression -> . SUCC OPENBRACKET expression CLOSEDBRACKET
    (8) expression -> . PRED OPENBRACKET expression CLOSEDBRACKET
    (9) expression -> . ISZERO OPENBRACKET expression CLOSEDBRACKET
    (10) zero -> . ZERO
    (11) boolean -> . TRUE
    (12) boolean -> . FALSE
    (18) application -> . abstraction expression
    (13) abstraction -> . LAMBDA VAR COLON type POINT expression

    IF              shift and go to state 15
    OPENBRACKET     shift and go to state 4
    VAR             shift and go to state 11
    SUCC            shift and go to state 6
    PRED            shift and go to state 10
    ISZERO          shift and go to state 1
    ZERO            shift and go to state 5
    TRUE            shift and go to state 14
    FALSE           shift and go to state 3
    LAMBDA          shift and go to state 12

    abstraction                    shift and go to state 2
    application                    shift and go to state 7
    zero                           shift and go to state 8
    boolean                        shift and go to state 9
    expression                     shift and go to state 42

state 40

    (3) expression -> IF expression THEN expression ELSE . expression
    (1) expression -> . zero
    (2) expression -> . boolean
    (3) expression -> . IF expression THEN expression ELSE expression
    (4) expression -> . OPENBRACKET expression CLOSEDBRACKET
    (5) expression -> . VAR
    (6) expression -> . application
    (7) expression -> . SUCC OPENBRACKET expression CLOSEDBRACKET
    (8) expression -> . PRED OPENBRACKET expression CLOSEDBRACKET
    (9) expression -> . ISZERO OPENBRACKET expression CLOSEDBRACKET
    (10) zero -> . ZERO
    (11) boolean -> . TRUE
    (12) boolean -> . FALSE
    (18) application -> . abstraction expression
    (13) abstraction -> . LAMBDA VAR COLON type POINT expression

    IF              shift and go to state 15
    OPENBRACKET     shift and go to state 4
    VAR             shift and go to state 11
    SUCC            shift and go to state 6
    PRED            shift and go to state 10
    ISZERO          shift and go to state 1
    ZERO            shift and go to state 5
    TRUE            shift and go to state 14
    FALSE           shift and go to state 3
    LAMBDA          shift and go to state 12

    abstraction                    shift and go to state 2
    application                    shift and go to state 7
    zero                           shift and go to state 8
    boolean                        shift and go to state 9
    expression                     shift and go to state 43

state 41

    (16) rectype -> ARROW type .

    POINT           reduce using rule 16 (rectype -> ARROW type .)


state 42

    (13) abstraction -> LAMBDA VAR COLON type POINT expression .

    IF              reduce using rule 13 (abstraction -> LAMBDA VAR COLON type POINT expression .)
    OPENBRACKET     reduce using rule 13 (abstraction -> LAMBDA VAR COLON type POINT expression .)
    VAR             reduce using rule 13 (abstraction -> LAMBDA VAR COLON type POINT expression .)
    SUCC            reduce using rule 13 (abstraction -> LAMBDA VAR COLON type POINT expression .)
    PRED            reduce using rule 13 (abstraction -> LAMBDA VAR COLON type POINT expression .)
    ISZERO          reduce using rule 13 (abstraction -> LAMBDA VAR COLON type POINT expression .)
    ZERO            reduce using rule 13 (abstraction -> LAMBDA VAR COLON type POINT expression .)
    TRUE            reduce using rule 13 (abstraction -> LAMBDA VAR COLON type POINT expression .)
    FALSE           reduce using rule 13 (abstraction -> LAMBDA VAR COLON type POINT expression .)
    LAMBDA          reduce using rule 13 (abstraction -> LAMBDA VAR COLON type POINT expression .)


state 43

    (3) expression -> IF expression THEN expression ELSE expression .

    $end            reduce using rule 3 (expression -> IF expression THEN expression ELSE expression .)
    CLOSEDBRACKET   reduce using rule 3 (expression -> IF expression THEN expression ELSE expression .)
    THEN            reduce using rule 3 (expression -> IF expression THEN expression ELSE expression .)
    ELSE            reduce using rule 3 (expression -> IF expression THEN expression ELSE expression .)
    IF              reduce using rule 3 (expression -> IF expression THEN expression ELSE expression .)
    OPENBRACKET     reduce using rule 3 (expression -> IF expression THEN expression ELSE expression .)
    VAR             reduce using rule 3 (expression -> IF expression THEN expression ELSE expression .)
    SUCC            reduce using rule 3 (expression -> IF expression THEN expression ELSE expression .)
    PRED            reduce using rule 3 (expression -> IF expression THEN expression ELSE expression .)
    ISZERO          reduce using rule 3 (expression -> IF expression THEN expression ELSE expression .)
    ZERO            reduce using rule 3 (expression -> IF expression THEN expression ELSE expression .)
    TRUE            reduce using rule 3 (expression -> IF expression THEN expression ELSE expression .)
    FALSE           reduce using rule 3 (expression -> IF expression THEN expression ELSE expression .)
    LAMBDA          reduce using rule 3 (expression -> IF expression THEN expression ELSE expression .)

