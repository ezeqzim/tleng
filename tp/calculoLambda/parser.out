Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> s
Rule 1     s -> lambda
Rule 2     lambda -> LAMBDA var COLON tipo POINT lambda
Rule 3     lambda -> ite
Rule 4     ite -> IF lambda THEN lambda ELSE lambda
Rule 5     ite -> app
Rule 6     app -> app final
Rule 7     app -> final
Rule 8     final -> ZERO
Rule 9     final -> TRUE
Rule 10    final -> FALSE
Rule 11    final -> var
Rule 12    final -> SUCC OPENBRACKET lambda CLOSEDBRACKET
Rule 13    final -> PRED OPENBRACKET lambda CLOSEDBRACKET
Rule 14    final -> ISZERO OPENBRACKET lambda CLOSEDBRACKET
Rule 15    final -> OPENBRACKET lambda CLOSEDBRACKET
Rule 16    var -> VAR
Rule 17    tipo -> BOOL flecha
Rule 18    tipo -> NAT flecha
Rule 19    flecha -> ARROW tipo
Rule 20    flecha -> <empty>

Terminals, with rules where they appear

ARROW                : 19
BOOL                 : 17
CLOSEDBRACKET        : 12 13 14 15
COLON                : 2
ELSE                 : 4
FALSE                : 10
IF                   : 4
ISZERO               : 14
LAMBDA               : 2
NAT                  : 18
OPENBRACKET          : 12 13 14 15
POINT                : 2
PRED                 : 13
SUCC                 : 12
THEN                 : 4
TRUE                 : 9
VAR                  : 16
ZERO                 : 8
error                : 

Nonterminals, with rules where they appear

app                  : 5 6
final                : 6 7
flecha               : 17 18
ite                  : 3
lambda               : 1 2 4 4 4 12 13 14 15
s                    : 0
tipo                 : 2 19
var                  : 2 11

Parsing method: LALR

state 0

    (0) S' -> . s
    (1) s -> . lambda
    (2) lambda -> . LAMBDA var COLON tipo POINT lambda
    (3) lambda -> . ite
    (4) ite -> . IF lambda THEN lambda ELSE lambda
    (5) ite -> . app
    (6) app -> . app final
    (7) app -> . final
    (8) final -> . ZERO
    (9) final -> . TRUE
    (10) final -> . FALSE
    (11) final -> . var
    (12) final -> . SUCC OPENBRACKET lambda CLOSEDBRACKET
    (13) final -> . PRED OPENBRACKET lambda CLOSEDBRACKET
    (14) final -> . ISZERO OPENBRACKET lambda CLOSEDBRACKET
    (15) final -> . OPENBRACKET lambda CLOSEDBRACKET
    (16) var -> . VAR

    LAMBDA          shift and go to state 15
    IF              shift and go to state 10
    ZERO            shift and go to state 8
    TRUE            shift and go to state 5
    FALSE           shift and go to state 11
    SUCC            shift and go to state 3
    PRED            shift and go to state 14
    ISZERO          shift and go to state 4
    OPENBRACKET     shift and go to state 12
    VAR             shift and go to state 9

    app                            shift and go to state 1
    ite                            shift and go to state 2
    s                              shift and go to state 13
    var                            shift and go to state 6
    final                          shift and go to state 7
    lambda                         shift and go to state 16

state 1

    (5) ite -> app .
    (6) app -> app . final
    (8) final -> . ZERO
    (9) final -> . TRUE
    (10) final -> . FALSE
    (11) final -> . var
    (12) final -> . SUCC OPENBRACKET lambda CLOSEDBRACKET
    (13) final -> . PRED OPENBRACKET lambda CLOSEDBRACKET
    (14) final -> . ISZERO OPENBRACKET lambda CLOSEDBRACKET
    (15) final -> . OPENBRACKET lambda CLOSEDBRACKET
    (16) var -> . VAR

    THEN            reduce using rule 5 (ite -> app .)
    CLOSEDBRACKET   reduce using rule 5 (ite -> app .)
    ELSE            reduce using rule 5 (ite -> app .)
    $end            reduce using rule 5 (ite -> app .)
    ZERO            shift and go to state 8
    TRUE            shift and go to state 5
    FALSE           shift and go to state 11
    SUCC            shift and go to state 3
    PRED            shift and go to state 14
    ISZERO          shift and go to state 4
    OPENBRACKET     shift and go to state 12
    VAR             shift and go to state 9

    var                            shift and go to state 6
    final                          shift and go to state 17

state 2

    (3) lambda -> ite .

    $end            reduce using rule 3 (lambda -> ite .)
    THEN            reduce using rule 3 (lambda -> ite .)
    CLOSEDBRACKET   reduce using rule 3 (lambda -> ite .)
    ELSE            reduce using rule 3 (lambda -> ite .)


state 3

    (12) final -> SUCC . OPENBRACKET lambda CLOSEDBRACKET

    OPENBRACKET     shift and go to state 18


state 4

    (14) final -> ISZERO . OPENBRACKET lambda CLOSEDBRACKET

    OPENBRACKET     shift and go to state 19


state 5

    (9) final -> TRUE .

    ZERO            reduce using rule 9 (final -> TRUE .)
    TRUE            reduce using rule 9 (final -> TRUE .)
    FALSE           reduce using rule 9 (final -> TRUE .)
    SUCC            reduce using rule 9 (final -> TRUE .)
    PRED            reduce using rule 9 (final -> TRUE .)
    ISZERO          reduce using rule 9 (final -> TRUE .)
    OPENBRACKET     reduce using rule 9 (final -> TRUE .)
    VAR             reduce using rule 9 (final -> TRUE .)
    ELSE            reduce using rule 9 (final -> TRUE .)
    THEN            reduce using rule 9 (final -> TRUE .)
    $end            reduce using rule 9 (final -> TRUE .)
    CLOSEDBRACKET   reduce using rule 9 (final -> TRUE .)


state 6

    (11) final -> var .

    ZERO            reduce using rule 11 (final -> var .)
    TRUE            reduce using rule 11 (final -> var .)
    FALSE           reduce using rule 11 (final -> var .)
    SUCC            reduce using rule 11 (final -> var .)
    PRED            reduce using rule 11 (final -> var .)
    ISZERO          reduce using rule 11 (final -> var .)
    OPENBRACKET     reduce using rule 11 (final -> var .)
    VAR             reduce using rule 11 (final -> var .)
    ELSE            reduce using rule 11 (final -> var .)
    THEN            reduce using rule 11 (final -> var .)
    $end            reduce using rule 11 (final -> var .)
    CLOSEDBRACKET   reduce using rule 11 (final -> var .)


state 7

    (7) app -> final .

    ZERO            reduce using rule 7 (app -> final .)
    TRUE            reduce using rule 7 (app -> final .)
    FALSE           reduce using rule 7 (app -> final .)
    SUCC            reduce using rule 7 (app -> final .)
    PRED            reduce using rule 7 (app -> final .)
    ISZERO          reduce using rule 7 (app -> final .)
    OPENBRACKET     reduce using rule 7 (app -> final .)
    VAR             reduce using rule 7 (app -> final .)
    $end            reduce using rule 7 (app -> final .)
    THEN            reduce using rule 7 (app -> final .)
    CLOSEDBRACKET   reduce using rule 7 (app -> final .)
    ELSE            reduce using rule 7 (app -> final .)


state 8

    (8) final -> ZERO .

    ZERO            reduce using rule 8 (final -> ZERO .)
    TRUE            reduce using rule 8 (final -> ZERO .)
    FALSE           reduce using rule 8 (final -> ZERO .)
    SUCC            reduce using rule 8 (final -> ZERO .)
    PRED            reduce using rule 8 (final -> ZERO .)
    ISZERO          reduce using rule 8 (final -> ZERO .)
    OPENBRACKET     reduce using rule 8 (final -> ZERO .)
    VAR             reduce using rule 8 (final -> ZERO .)
    ELSE            reduce using rule 8 (final -> ZERO .)
    THEN            reduce using rule 8 (final -> ZERO .)
    $end            reduce using rule 8 (final -> ZERO .)
    CLOSEDBRACKET   reduce using rule 8 (final -> ZERO .)


state 9

    (16) var -> VAR .

    ZERO            reduce using rule 16 (var -> VAR .)
    TRUE            reduce using rule 16 (var -> VAR .)
    FALSE           reduce using rule 16 (var -> VAR .)
    SUCC            reduce using rule 16 (var -> VAR .)
    PRED            reduce using rule 16 (var -> VAR .)
    ISZERO          reduce using rule 16 (var -> VAR .)
    OPENBRACKET     reduce using rule 16 (var -> VAR .)
    VAR             reduce using rule 16 (var -> VAR .)
    $end            reduce using rule 16 (var -> VAR .)
    THEN            reduce using rule 16 (var -> VAR .)
    CLOSEDBRACKET   reduce using rule 16 (var -> VAR .)
    ELSE            reduce using rule 16 (var -> VAR .)
    COLON           reduce using rule 16 (var -> VAR .)


state 10

    (4) ite -> IF . lambda THEN lambda ELSE lambda
    (2) lambda -> . LAMBDA var COLON tipo POINT lambda
    (3) lambda -> . ite
    (4) ite -> . IF lambda THEN lambda ELSE lambda
    (5) ite -> . app
    (6) app -> . app final
    (7) app -> . final
    (8) final -> . ZERO
    (9) final -> . TRUE
    (10) final -> . FALSE
    (11) final -> . var
    (12) final -> . SUCC OPENBRACKET lambda CLOSEDBRACKET
    (13) final -> . PRED OPENBRACKET lambda CLOSEDBRACKET
    (14) final -> . ISZERO OPENBRACKET lambda CLOSEDBRACKET
    (15) final -> . OPENBRACKET lambda CLOSEDBRACKET
    (16) var -> . VAR

    LAMBDA          shift and go to state 15
    IF              shift and go to state 10
    ZERO            shift and go to state 8
    TRUE            shift and go to state 5
    FALSE           shift and go to state 11
    SUCC            shift and go to state 3
    PRED            shift and go to state 14
    ISZERO          shift and go to state 4
    OPENBRACKET     shift and go to state 12
    VAR             shift and go to state 9

    app                            shift and go to state 1
    ite                            shift and go to state 2
    var                            shift and go to state 6
    final                          shift and go to state 7
    lambda                         shift and go to state 20

state 11

    (10) final -> FALSE .

    ZERO            reduce using rule 10 (final -> FALSE .)
    TRUE            reduce using rule 10 (final -> FALSE .)
    FALSE           reduce using rule 10 (final -> FALSE .)
    SUCC            reduce using rule 10 (final -> FALSE .)
    PRED            reduce using rule 10 (final -> FALSE .)
    ISZERO          reduce using rule 10 (final -> FALSE .)
    OPENBRACKET     reduce using rule 10 (final -> FALSE .)
    VAR             reduce using rule 10 (final -> FALSE .)
    ELSE            reduce using rule 10 (final -> FALSE .)
    THEN            reduce using rule 10 (final -> FALSE .)
    $end            reduce using rule 10 (final -> FALSE .)
    CLOSEDBRACKET   reduce using rule 10 (final -> FALSE .)


state 12

    (15) final -> OPENBRACKET . lambda CLOSEDBRACKET
    (2) lambda -> . LAMBDA var COLON tipo POINT lambda
    (3) lambda -> . ite
    (4) ite -> . IF lambda THEN lambda ELSE lambda
    (5) ite -> . app
    (6) app -> . app final
    (7) app -> . final
    (8) final -> . ZERO
    (9) final -> . TRUE
    (10) final -> . FALSE
    (11) final -> . var
    (12) final -> . SUCC OPENBRACKET lambda CLOSEDBRACKET
    (13) final -> . PRED OPENBRACKET lambda CLOSEDBRACKET
    (14) final -> . ISZERO OPENBRACKET lambda CLOSEDBRACKET
    (15) final -> . OPENBRACKET lambda CLOSEDBRACKET
    (16) var -> . VAR

    LAMBDA          shift and go to state 15
    IF              shift and go to state 10
    ZERO            shift and go to state 8
    TRUE            shift and go to state 5
    FALSE           shift and go to state 11
    SUCC            shift and go to state 3
    PRED            shift and go to state 14
    ISZERO          shift and go to state 4
    OPENBRACKET     shift and go to state 12
    VAR             shift and go to state 9

    app                            shift and go to state 1
    ite                            shift and go to state 2
    var                            shift and go to state 6
    final                          shift and go to state 7
    lambda                         shift and go to state 21

state 13

    (0) S' -> s .



state 14

    (13) final -> PRED . OPENBRACKET lambda CLOSEDBRACKET

    OPENBRACKET     shift and go to state 22


state 15

    (2) lambda -> LAMBDA . var COLON tipo POINT lambda
    (16) var -> . VAR

    VAR             shift and go to state 9

    var                            shift and go to state 23

state 16

    (1) s -> lambda .

    $end            reduce using rule 1 (s -> lambda .)


state 17

    (6) app -> app final .

    ZERO            reduce using rule 6 (app -> app final .)
    TRUE            reduce using rule 6 (app -> app final .)
    FALSE           reduce using rule 6 (app -> app final .)
    SUCC            reduce using rule 6 (app -> app final .)
    PRED            reduce using rule 6 (app -> app final .)
    ISZERO          reduce using rule 6 (app -> app final .)
    OPENBRACKET     reduce using rule 6 (app -> app final .)
    VAR             reduce using rule 6 (app -> app final .)
    $end            reduce using rule 6 (app -> app final .)
    THEN            reduce using rule 6 (app -> app final .)
    CLOSEDBRACKET   reduce using rule 6 (app -> app final .)
    ELSE            reduce using rule 6 (app -> app final .)


state 18

    (12) final -> SUCC OPENBRACKET . lambda CLOSEDBRACKET
    (2) lambda -> . LAMBDA var COLON tipo POINT lambda
    (3) lambda -> . ite
    (4) ite -> . IF lambda THEN lambda ELSE lambda
    (5) ite -> . app
    (6) app -> . app final
    (7) app -> . final
    (8) final -> . ZERO
    (9) final -> . TRUE
    (10) final -> . FALSE
    (11) final -> . var
    (12) final -> . SUCC OPENBRACKET lambda CLOSEDBRACKET
    (13) final -> . PRED OPENBRACKET lambda CLOSEDBRACKET
    (14) final -> . ISZERO OPENBRACKET lambda CLOSEDBRACKET
    (15) final -> . OPENBRACKET lambda CLOSEDBRACKET
    (16) var -> . VAR

    LAMBDA          shift and go to state 15
    IF              shift and go to state 10
    ZERO            shift and go to state 8
    TRUE            shift and go to state 5
    FALSE           shift and go to state 11
    SUCC            shift and go to state 3
    PRED            shift and go to state 14
    ISZERO          shift and go to state 4
    OPENBRACKET     shift and go to state 12
    VAR             shift and go to state 9

    app                            shift and go to state 1
    ite                            shift and go to state 2
    var                            shift and go to state 6
    final                          shift and go to state 7
    lambda                         shift and go to state 24

state 19

    (14) final -> ISZERO OPENBRACKET . lambda CLOSEDBRACKET
    (2) lambda -> . LAMBDA var COLON tipo POINT lambda
    (3) lambda -> . ite
    (4) ite -> . IF lambda THEN lambda ELSE lambda
    (5) ite -> . app
    (6) app -> . app final
    (7) app -> . final
    (8) final -> . ZERO
    (9) final -> . TRUE
    (10) final -> . FALSE
    (11) final -> . var
    (12) final -> . SUCC OPENBRACKET lambda CLOSEDBRACKET
    (13) final -> . PRED OPENBRACKET lambda CLOSEDBRACKET
    (14) final -> . ISZERO OPENBRACKET lambda CLOSEDBRACKET
    (15) final -> . OPENBRACKET lambda CLOSEDBRACKET
    (16) var -> . VAR

    LAMBDA          shift and go to state 15
    IF              shift and go to state 10
    ZERO            shift and go to state 8
    TRUE            shift and go to state 5
    FALSE           shift and go to state 11
    SUCC            shift and go to state 3
    PRED            shift and go to state 14
    ISZERO          shift and go to state 4
    OPENBRACKET     shift and go to state 12
    VAR             shift and go to state 9

    app                            shift and go to state 1
    ite                            shift and go to state 2
    var                            shift and go to state 6
    final                          shift and go to state 7
    lambda                         shift and go to state 25

state 20

    (4) ite -> IF lambda . THEN lambda ELSE lambda

    THEN            shift and go to state 26


state 21

    (15) final -> OPENBRACKET lambda . CLOSEDBRACKET

    CLOSEDBRACKET   shift and go to state 27


state 22

    (13) final -> PRED OPENBRACKET . lambda CLOSEDBRACKET
    (2) lambda -> . LAMBDA var COLON tipo POINT lambda
    (3) lambda -> . ite
    (4) ite -> . IF lambda THEN lambda ELSE lambda
    (5) ite -> . app
    (6) app -> . app final
    (7) app -> . final
    (8) final -> . ZERO
    (9) final -> . TRUE
    (10) final -> . FALSE
    (11) final -> . var
    (12) final -> . SUCC OPENBRACKET lambda CLOSEDBRACKET
    (13) final -> . PRED OPENBRACKET lambda CLOSEDBRACKET
    (14) final -> . ISZERO OPENBRACKET lambda CLOSEDBRACKET
    (15) final -> . OPENBRACKET lambda CLOSEDBRACKET
    (16) var -> . VAR

    LAMBDA          shift and go to state 15
    IF              shift and go to state 10
    ZERO            shift and go to state 8
    TRUE            shift and go to state 5
    FALSE           shift and go to state 11
    SUCC            shift and go to state 3
    PRED            shift and go to state 14
    ISZERO          shift and go to state 4
    OPENBRACKET     shift and go to state 12
    VAR             shift and go to state 9

    app                            shift and go to state 1
    ite                            shift and go to state 2
    var                            shift and go to state 6
    final                          shift and go to state 7
    lambda                         shift and go to state 28

state 23

    (2) lambda -> LAMBDA var . COLON tipo POINT lambda

    COLON           shift and go to state 29


state 24

    (12) final -> SUCC OPENBRACKET lambda . CLOSEDBRACKET

    CLOSEDBRACKET   shift and go to state 30


state 25

    (14) final -> ISZERO OPENBRACKET lambda . CLOSEDBRACKET

    CLOSEDBRACKET   shift and go to state 31


state 26

    (4) ite -> IF lambda THEN . lambda ELSE lambda
    (2) lambda -> . LAMBDA var COLON tipo POINT lambda
    (3) lambda -> . ite
    (4) ite -> . IF lambda THEN lambda ELSE lambda
    (5) ite -> . app
    (6) app -> . app final
    (7) app -> . final
    (8) final -> . ZERO
    (9) final -> . TRUE
    (10) final -> . FALSE
    (11) final -> . var
    (12) final -> . SUCC OPENBRACKET lambda CLOSEDBRACKET
    (13) final -> . PRED OPENBRACKET lambda CLOSEDBRACKET
    (14) final -> . ISZERO OPENBRACKET lambda CLOSEDBRACKET
    (15) final -> . OPENBRACKET lambda CLOSEDBRACKET
    (16) var -> . VAR

    LAMBDA          shift and go to state 15
    IF              shift and go to state 10
    ZERO            shift and go to state 8
    TRUE            shift and go to state 5
    FALSE           shift and go to state 11
    SUCC            shift and go to state 3
    PRED            shift and go to state 14
    ISZERO          shift and go to state 4
    OPENBRACKET     shift and go to state 12
    VAR             shift and go to state 9

    app                            shift and go to state 1
    ite                            shift and go to state 2
    var                            shift and go to state 6
    final                          shift and go to state 7
    lambda                         shift and go to state 32

state 27

    (15) final -> OPENBRACKET lambda CLOSEDBRACKET .

    ZERO            reduce using rule 15 (final -> OPENBRACKET lambda CLOSEDBRACKET .)
    TRUE            reduce using rule 15 (final -> OPENBRACKET lambda CLOSEDBRACKET .)
    FALSE           reduce using rule 15 (final -> OPENBRACKET lambda CLOSEDBRACKET .)
    SUCC            reduce using rule 15 (final -> OPENBRACKET lambda CLOSEDBRACKET .)
    PRED            reduce using rule 15 (final -> OPENBRACKET lambda CLOSEDBRACKET .)
    ISZERO          reduce using rule 15 (final -> OPENBRACKET lambda CLOSEDBRACKET .)
    OPENBRACKET     reduce using rule 15 (final -> OPENBRACKET lambda CLOSEDBRACKET .)
    VAR             reduce using rule 15 (final -> OPENBRACKET lambda CLOSEDBRACKET .)
    ELSE            reduce using rule 15 (final -> OPENBRACKET lambda CLOSEDBRACKET .)
    THEN            reduce using rule 15 (final -> OPENBRACKET lambda CLOSEDBRACKET .)
    $end            reduce using rule 15 (final -> OPENBRACKET lambda CLOSEDBRACKET .)
    CLOSEDBRACKET   reduce using rule 15 (final -> OPENBRACKET lambda CLOSEDBRACKET .)


state 28

    (13) final -> PRED OPENBRACKET lambda . CLOSEDBRACKET

    CLOSEDBRACKET   shift and go to state 33


state 29

    (2) lambda -> LAMBDA var COLON . tipo POINT lambda
    (17) tipo -> . BOOL flecha
    (18) tipo -> . NAT flecha

    BOOL            shift and go to state 36
    NAT             shift and go to state 35

    tipo                           shift and go to state 34

state 30

    (12) final -> SUCC OPENBRACKET lambda CLOSEDBRACKET .

    ZERO            reduce using rule 12 (final -> SUCC OPENBRACKET lambda CLOSEDBRACKET .)
    TRUE            reduce using rule 12 (final -> SUCC OPENBRACKET lambda CLOSEDBRACKET .)
    FALSE           reduce using rule 12 (final -> SUCC OPENBRACKET lambda CLOSEDBRACKET .)
    SUCC            reduce using rule 12 (final -> SUCC OPENBRACKET lambda CLOSEDBRACKET .)
    PRED            reduce using rule 12 (final -> SUCC OPENBRACKET lambda CLOSEDBRACKET .)
    ISZERO          reduce using rule 12 (final -> SUCC OPENBRACKET lambda CLOSEDBRACKET .)
    OPENBRACKET     reduce using rule 12 (final -> SUCC OPENBRACKET lambda CLOSEDBRACKET .)
    VAR             reduce using rule 12 (final -> SUCC OPENBRACKET lambda CLOSEDBRACKET .)
    ELSE            reduce using rule 12 (final -> SUCC OPENBRACKET lambda CLOSEDBRACKET .)
    THEN            reduce using rule 12 (final -> SUCC OPENBRACKET lambda CLOSEDBRACKET .)
    $end            reduce using rule 12 (final -> SUCC OPENBRACKET lambda CLOSEDBRACKET .)
    CLOSEDBRACKET   reduce using rule 12 (final -> SUCC OPENBRACKET lambda CLOSEDBRACKET .)


state 31

    (14) final -> ISZERO OPENBRACKET lambda CLOSEDBRACKET .

    ZERO            reduce using rule 14 (final -> ISZERO OPENBRACKET lambda CLOSEDBRACKET .)
    TRUE            reduce using rule 14 (final -> ISZERO OPENBRACKET lambda CLOSEDBRACKET .)
    FALSE           reduce using rule 14 (final -> ISZERO OPENBRACKET lambda CLOSEDBRACKET .)
    SUCC            reduce using rule 14 (final -> ISZERO OPENBRACKET lambda CLOSEDBRACKET .)
    PRED            reduce using rule 14 (final -> ISZERO OPENBRACKET lambda CLOSEDBRACKET .)
    ISZERO          reduce using rule 14 (final -> ISZERO OPENBRACKET lambda CLOSEDBRACKET .)
    OPENBRACKET     reduce using rule 14 (final -> ISZERO OPENBRACKET lambda CLOSEDBRACKET .)
    VAR             reduce using rule 14 (final -> ISZERO OPENBRACKET lambda CLOSEDBRACKET .)
    ELSE            reduce using rule 14 (final -> ISZERO OPENBRACKET lambda CLOSEDBRACKET .)
    THEN            reduce using rule 14 (final -> ISZERO OPENBRACKET lambda CLOSEDBRACKET .)
    $end            reduce using rule 14 (final -> ISZERO OPENBRACKET lambda CLOSEDBRACKET .)
    CLOSEDBRACKET   reduce using rule 14 (final -> ISZERO OPENBRACKET lambda CLOSEDBRACKET .)


state 32

    (4) ite -> IF lambda THEN lambda . ELSE lambda

    ELSE            shift and go to state 37


state 33

    (13) final -> PRED OPENBRACKET lambda CLOSEDBRACKET .

    ZERO            reduce using rule 13 (final -> PRED OPENBRACKET lambda CLOSEDBRACKET .)
    TRUE            reduce using rule 13 (final -> PRED OPENBRACKET lambda CLOSEDBRACKET .)
    FALSE           reduce using rule 13 (final -> PRED OPENBRACKET lambda CLOSEDBRACKET .)
    SUCC            reduce using rule 13 (final -> PRED OPENBRACKET lambda CLOSEDBRACKET .)
    PRED            reduce using rule 13 (final -> PRED OPENBRACKET lambda CLOSEDBRACKET .)
    ISZERO          reduce using rule 13 (final -> PRED OPENBRACKET lambda CLOSEDBRACKET .)
    OPENBRACKET     reduce using rule 13 (final -> PRED OPENBRACKET lambda CLOSEDBRACKET .)
    VAR             reduce using rule 13 (final -> PRED OPENBRACKET lambda CLOSEDBRACKET .)
    ELSE            reduce using rule 13 (final -> PRED OPENBRACKET lambda CLOSEDBRACKET .)
    THEN            reduce using rule 13 (final -> PRED OPENBRACKET lambda CLOSEDBRACKET .)
    $end            reduce using rule 13 (final -> PRED OPENBRACKET lambda CLOSEDBRACKET .)
    CLOSEDBRACKET   reduce using rule 13 (final -> PRED OPENBRACKET lambda CLOSEDBRACKET .)


state 34

    (2) lambda -> LAMBDA var COLON tipo . POINT lambda

    POINT           shift and go to state 38


state 35

    (18) tipo -> NAT . flecha
    (19) flecha -> . ARROW tipo
    (20) flecha -> .

    ARROW           shift and go to state 40
    POINT           reduce using rule 20 (flecha -> .)

    flecha                         shift and go to state 39

state 36

    (17) tipo -> BOOL . flecha
    (19) flecha -> . ARROW tipo
    (20) flecha -> .

    ARROW           shift and go to state 40
    POINT           reduce using rule 20 (flecha -> .)

    flecha                         shift and go to state 41

state 37

    (4) ite -> IF lambda THEN lambda ELSE . lambda
    (2) lambda -> . LAMBDA var COLON tipo POINT lambda
    (3) lambda -> . ite
    (4) ite -> . IF lambda THEN lambda ELSE lambda
    (5) ite -> . app
    (6) app -> . app final
    (7) app -> . final
    (8) final -> . ZERO
    (9) final -> . TRUE
    (10) final -> . FALSE
    (11) final -> . var
    (12) final -> . SUCC OPENBRACKET lambda CLOSEDBRACKET
    (13) final -> . PRED OPENBRACKET lambda CLOSEDBRACKET
    (14) final -> . ISZERO OPENBRACKET lambda CLOSEDBRACKET
    (15) final -> . OPENBRACKET lambda CLOSEDBRACKET
    (16) var -> . VAR

    LAMBDA          shift and go to state 15
    IF              shift and go to state 10
    ZERO            shift and go to state 8
    TRUE            shift and go to state 5
    FALSE           shift and go to state 11
    SUCC            shift and go to state 3
    PRED            shift and go to state 14
    ISZERO          shift and go to state 4
    OPENBRACKET     shift and go to state 12
    VAR             shift and go to state 9

    app                            shift and go to state 1
    ite                            shift and go to state 2
    var                            shift and go to state 6
    final                          shift and go to state 7
    lambda                         shift and go to state 42

state 38

    (2) lambda -> LAMBDA var COLON tipo POINT . lambda
    (2) lambda -> . LAMBDA var COLON tipo POINT lambda
    (3) lambda -> . ite
    (4) ite -> . IF lambda THEN lambda ELSE lambda
    (5) ite -> . app
    (6) app -> . app final
    (7) app -> . final
    (8) final -> . ZERO
    (9) final -> . TRUE
    (10) final -> . FALSE
    (11) final -> . var
    (12) final -> . SUCC OPENBRACKET lambda CLOSEDBRACKET
    (13) final -> . PRED OPENBRACKET lambda CLOSEDBRACKET
    (14) final -> . ISZERO OPENBRACKET lambda CLOSEDBRACKET
    (15) final -> . OPENBRACKET lambda CLOSEDBRACKET
    (16) var -> . VAR

    LAMBDA          shift and go to state 15
    IF              shift and go to state 10
    ZERO            shift and go to state 8
    TRUE            shift and go to state 5
    FALSE           shift and go to state 11
    SUCC            shift and go to state 3
    PRED            shift and go to state 14
    ISZERO          shift and go to state 4
    OPENBRACKET     shift and go to state 12
    VAR             shift and go to state 9

    app                            shift and go to state 1
    ite                            shift and go to state 2
    var                            shift and go to state 6
    final                          shift and go to state 7
    lambda                         shift and go to state 43

state 39

    (18) tipo -> NAT flecha .

    POINT           reduce using rule 18 (tipo -> NAT flecha .)


state 40

    (19) flecha -> ARROW . tipo
    (17) tipo -> . BOOL flecha
    (18) tipo -> . NAT flecha

    BOOL            shift and go to state 36
    NAT             shift and go to state 35

    tipo                           shift and go to state 44

state 41

    (17) tipo -> BOOL flecha .

    POINT           reduce using rule 17 (tipo -> BOOL flecha .)


state 42

    (4) ite -> IF lambda THEN lambda ELSE lambda .

    THEN            reduce using rule 4 (ite -> IF lambda THEN lambda ELSE lambda .)
    CLOSEDBRACKET   reduce using rule 4 (ite -> IF lambda THEN lambda ELSE lambda .)
    ELSE            reduce using rule 4 (ite -> IF lambda THEN lambda ELSE lambda .)
    $end            reduce using rule 4 (ite -> IF lambda THEN lambda ELSE lambda .)


state 43

    (2) lambda -> LAMBDA var COLON tipo POINT lambda .

    $end            reduce using rule 2 (lambda -> LAMBDA var COLON tipo POINT lambda .)
    THEN            reduce using rule 2 (lambda -> LAMBDA var COLON tipo POINT lambda .)
    CLOSEDBRACKET   reduce using rule 2 (lambda -> LAMBDA var COLON tipo POINT lambda .)
    ELSE            reduce using rule 2 (lambda -> LAMBDA var COLON tipo POINT lambda .)


state 44

    (19) flecha -> ARROW tipo .

    POINT           reduce using rule 19 (flecha -> ARROW tipo .)

