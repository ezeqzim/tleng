Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> s
Rule 1     s -> a
Rule 2     a -> a l
Rule 3     a -> l
Rule 4     l -> LAMBDA v COLON t POINT l
Rule 5     l -> e
Rule 6     t -> BOOL f
Rule 7     t -> NAT f
Rule 8     f -> ARROW t
Rule 9     f -> <empty>
Rule 10    e -> ZERO
Rule 11    e -> TRUE
Rule 12    e -> FALSE
Rule 13    e -> v
Rule 14    e -> IF a THEN e ELSE e
Rule 15    e -> SUCC OPENBRACKET a CLOSEDBRACKET
Rule 16    e -> PRED OPENBRACKET a CLOSEDBRACKET
Rule 17    e -> ISZERO OPENBRACKET a CLOSEDBRACKET
Rule 18    e -> OPENBRACKET a CLOSEDBRACKET
Rule 19    v -> VAR

Terminals, with rules where they appear

ARROW                : 8
BOOL                 : 6
CLOSEDBRACKET        : 15 16 17 18
COLON                : 4
ELSE                 : 14
FALSE                : 12
IF                   : 14
ISZERO               : 17
LAMBDA               : 4
NAT                  : 7
OPENBRACKET          : 15 16 17 18
POINT                : 4
PRED                 : 16
SUCC                 : 15
THEN                 : 14
TRUE                 : 11
VAR                  : 19
ZERO                 : 10
error                : 

Nonterminals, with rules where they appear

a                    : 1 2 14 15 16 17 18
e                    : 5 14 14
f                    : 6 7
l                    : 2 3 4
s                    : 0
t                    : 4 8
v                    : 4 13

Parsing method: LALR

state 0

    (0) S' -> . s
    (1) s -> . a
    (2) a -> . a l
    (3) a -> . l
    (4) l -> . LAMBDA v COLON t POINT l
    (5) l -> . e
    (10) e -> . ZERO
    (11) e -> . TRUE
    (12) e -> . FALSE
    (13) e -> . v
    (14) e -> . IF a THEN e ELSE e
    (15) e -> . SUCC OPENBRACKET a CLOSEDBRACKET
    (16) e -> . PRED OPENBRACKET a CLOSEDBRACKET
    (17) e -> . ISZERO OPENBRACKET a CLOSEDBRACKET
    (18) e -> . OPENBRACKET a CLOSEDBRACKET
    (19) v -> . VAR

    LAMBDA          shift and go to state 15
    ZERO            shift and go to state 6
    TRUE            shift and go to state 14
    FALSE           shift and go to state 12
    IF              shift and go to state 13
    SUCC            shift and go to state 4
    PRED            shift and go to state 8
    ISZERO          shift and go to state 11
    OPENBRACKET     shift and go to state 5
    VAR             shift and go to state 2

    a                              shift and go to state 1
    e                              shift and go to state 3
    l                              shift and go to state 7
    s                              shift and go to state 9
    v                              shift and go to state 10

state 1

    (1) s -> a .
    (2) a -> a . l
    (4) l -> . LAMBDA v COLON t POINT l
    (5) l -> . e
    (10) e -> . ZERO
    (11) e -> . TRUE
    (12) e -> . FALSE
    (13) e -> . v
    (14) e -> . IF a THEN e ELSE e
    (15) e -> . SUCC OPENBRACKET a CLOSEDBRACKET
    (16) e -> . PRED OPENBRACKET a CLOSEDBRACKET
    (17) e -> . ISZERO OPENBRACKET a CLOSEDBRACKET
    (18) e -> . OPENBRACKET a CLOSEDBRACKET
    (19) v -> . VAR

    $end            reduce using rule 1 (s -> a .)
    LAMBDA          shift and go to state 15
    ZERO            shift and go to state 6
    TRUE            shift and go to state 14
    FALSE           shift and go to state 12
    IF              shift and go to state 13
    SUCC            shift and go to state 4
    PRED            shift and go to state 8
    ISZERO          shift and go to state 11
    OPENBRACKET     shift and go to state 5
    VAR             shift and go to state 2

    e                              shift and go to state 3
    l                              shift and go to state 16
    v                              shift and go to state 10

state 2

    (19) v -> VAR .

    CLOSEDBRACKET   reduce using rule 19 (v -> VAR .)
    LAMBDA          reduce using rule 19 (v -> VAR .)
    ZERO            reduce using rule 19 (v -> VAR .)
    TRUE            reduce using rule 19 (v -> VAR .)
    FALSE           reduce using rule 19 (v -> VAR .)
    IF              reduce using rule 19 (v -> VAR .)
    SUCC            reduce using rule 19 (v -> VAR .)
    PRED            reduce using rule 19 (v -> VAR .)
    ISZERO          reduce using rule 19 (v -> VAR .)
    OPENBRACKET     reduce using rule 19 (v -> VAR .)
    VAR             reduce using rule 19 (v -> VAR .)
    THEN            reduce using rule 19 (v -> VAR .)
    $end            reduce using rule 19 (v -> VAR .)
    COLON           reduce using rule 19 (v -> VAR .)
    ELSE            reduce using rule 19 (v -> VAR .)


state 3

    (5) l -> e .

    LAMBDA          reduce using rule 5 (l -> e .)
    ZERO            reduce using rule 5 (l -> e .)
    TRUE            reduce using rule 5 (l -> e .)
    FALSE           reduce using rule 5 (l -> e .)
    IF              reduce using rule 5 (l -> e .)
    SUCC            reduce using rule 5 (l -> e .)
    PRED            reduce using rule 5 (l -> e .)
    ISZERO          reduce using rule 5 (l -> e .)
    OPENBRACKET     reduce using rule 5 (l -> e .)
    VAR             reduce using rule 5 (l -> e .)
    $end            reduce using rule 5 (l -> e .)
    CLOSEDBRACKET   reduce using rule 5 (l -> e .)
    THEN            reduce using rule 5 (l -> e .)


state 4

    (15) e -> SUCC . OPENBRACKET a CLOSEDBRACKET

    OPENBRACKET     shift and go to state 17


state 5

    (18) e -> OPENBRACKET . a CLOSEDBRACKET
    (2) a -> . a l
    (3) a -> . l
    (4) l -> . LAMBDA v COLON t POINT l
    (5) l -> . e
    (10) e -> . ZERO
    (11) e -> . TRUE
    (12) e -> . FALSE
    (13) e -> . v
    (14) e -> . IF a THEN e ELSE e
    (15) e -> . SUCC OPENBRACKET a CLOSEDBRACKET
    (16) e -> . PRED OPENBRACKET a CLOSEDBRACKET
    (17) e -> . ISZERO OPENBRACKET a CLOSEDBRACKET
    (18) e -> . OPENBRACKET a CLOSEDBRACKET
    (19) v -> . VAR

    LAMBDA          shift and go to state 15
    ZERO            shift and go to state 6
    TRUE            shift and go to state 14
    FALSE           shift and go to state 12
    IF              shift and go to state 13
    SUCC            shift and go to state 4
    PRED            shift and go to state 8
    ISZERO          shift and go to state 11
    OPENBRACKET     shift and go to state 5
    VAR             shift and go to state 2

    a                              shift and go to state 18
    e                              shift and go to state 3
    l                              shift and go to state 7
    v                              shift and go to state 10

state 6

    (10) e -> ZERO .

    LAMBDA          reduce using rule 10 (e -> ZERO .)
    ZERO            reduce using rule 10 (e -> ZERO .)
    TRUE            reduce using rule 10 (e -> ZERO .)
    FALSE           reduce using rule 10 (e -> ZERO .)
    IF              reduce using rule 10 (e -> ZERO .)
    SUCC            reduce using rule 10 (e -> ZERO .)
    PRED            reduce using rule 10 (e -> ZERO .)
    ISZERO          reduce using rule 10 (e -> ZERO .)
    OPENBRACKET     reduce using rule 10 (e -> ZERO .)
    VAR             reduce using rule 10 (e -> ZERO .)
    $end            reduce using rule 10 (e -> ZERO .)
    CLOSEDBRACKET   reduce using rule 10 (e -> ZERO .)
    THEN            reduce using rule 10 (e -> ZERO .)
    ELSE            reduce using rule 10 (e -> ZERO .)


state 7

    (3) a -> l .

    CLOSEDBRACKET   reduce using rule 3 (a -> l .)
    LAMBDA          reduce using rule 3 (a -> l .)
    ZERO            reduce using rule 3 (a -> l .)
    TRUE            reduce using rule 3 (a -> l .)
    FALSE           reduce using rule 3 (a -> l .)
    IF              reduce using rule 3 (a -> l .)
    SUCC            reduce using rule 3 (a -> l .)
    PRED            reduce using rule 3 (a -> l .)
    ISZERO          reduce using rule 3 (a -> l .)
    OPENBRACKET     reduce using rule 3 (a -> l .)
    VAR             reduce using rule 3 (a -> l .)
    THEN            reduce using rule 3 (a -> l .)
    $end            reduce using rule 3 (a -> l .)


state 8

    (16) e -> PRED . OPENBRACKET a CLOSEDBRACKET

    OPENBRACKET     shift and go to state 19


state 9

    (0) S' -> s .



state 10

    (13) e -> v .

    LAMBDA          reduce using rule 13 (e -> v .)
    ZERO            reduce using rule 13 (e -> v .)
    TRUE            reduce using rule 13 (e -> v .)
    FALSE           reduce using rule 13 (e -> v .)
    IF              reduce using rule 13 (e -> v .)
    SUCC            reduce using rule 13 (e -> v .)
    PRED            reduce using rule 13 (e -> v .)
    ISZERO          reduce using rule 13 (e -> v .)
    OPENBRACKET     reduce using rule 13 (e -> v .)
    VAR             reduce using rule 13 (e -> v .)
    $end            reduce using rule 13 (e -> v .)
    CLOSEDBRACKET   reduce using rule 13 (e -> v .)
    THEN            reduce using rule 13 (e -> v .)
    ELSE            reduce using rule 13 (e -> v .)


state 11

    (17) e -> ISZERO . OPENBRACKET a CLOSEDBRACKET

    OPENBRACKET     shift and go to state 20


state 12

    (12) e -> FALSE .

    LAMBDA          reduce using rule 12 (e -> FALSE .)
    ZERO            reduce using rule 12 (e -> FALSE .)
    TRUE            reduce using rule 12 (e -> FALSE .)
    FALSE           reduce using rule 12 (e -> FALSE .)
    IF              reduce using rule 12 (e -> FALSE .)
    SUCC            reduce using rule 12 (e -> FALSE .)
    PRED            reduce using rule 12 (e -> FALSE .)
    ISZERO          reduce using rule 12 (e -> FALSE .)
    OPENBRACKET     reduce using rule 12 (e -> FALSE .)
    VAR             reduce using rule 12 (e -> FALSE .)
    $end            reduce using rule 12 (e -> FALSE .)
    CLOSEDBRACKET   reduce using rule 12 (e -> FALSE .)
    THEN            reduce using rule 12 (e -> FALSE .)
    ELSE            reduce using rule 12 (e -> FALSE .)


state 13

    (14) e -> IF . a THEN e ELSE e
    (2) a -> . a l
    (3) a -> . l
    (4) l -> . LAMBDA v COLON t POINT l
    (5) l -> . e
    (10) e -> . ZERO
    (11) e -> . TRUE
    (12) e -> . FALSE
    (13) e -> . v
    (14) e -> . IF a THEN e ELSE e
    (15) e -> . SUCC OPENBRACKET a CLOSEDBRACKET
    (16) e -> . PRED OPENBRACKET a CLOSEDBRACKET
    (17) e -> . ISZERO OPENBRACKET a CLOSEDBRACKET
    (18) e -> . OPENBRACKET a CLOSEDBRACKET
    (19) v -> . VAR

    LAMBDA          shift and go to state 15
    ZERO            shift and go to state 6
    TRUE            shift and go to state 14
    FALSE           shift and go to state 12
    IF              shift and go to state 13
    SUCC            shift and go to state 4
    PRED            shift and go to state 8
    ISZERO          shift and go to state 11
    OPENBRACKET     shift and go to state 5
    VAR             shift and go to state 2

    a                              shift and go to state 21
    e                              shift and go to state 3
    l                              shift and go to state 7
    v                              shift and go to state 10

state 14

    (11) e -> TRUE .

    LAMBDA          reduce using rule 11 (e -> TRUE .)
    ZERO            reduce using rule 11 (e -> TRUE .)
    TRUE            reduce using rule 11 (e -> TRUE .)
    FALSE           reduce using rule 11 (e -> TRUE .)
    IF              reduce using rule 11 (e -> TRUE .)
    SUCC            reduce using rule 11 (e -> TRUE .)
    PRED            reduce using rule 11 (e -> TRUE .)
    ISZERO          reduce using rule 11 (e -> TRUE .)
    OPENBRACKET     reduce using rule 11 (e -> TRUE .)
    VAR             reduce using rule 11 (e -> TRUE .)
    $end            reduce using rule 11 (e -> TRUE .)
    CLOSEDBRACKET   reduce using rule 11 (e -> TRUE .)
    THEN            reduce using rule 11 (e -> TRUE .)
    ELSE            reduce using rule 11 (e -> TRUE .)


state 15

    (4) l -> LAMBDA . v COLON t POINT l
    (19) v -> . VAR

    VAR             shift and go to state 2

    v                              shift and go to state 22

state 16

    (2) a -> a l .

    CLOSEDBRACKET   reduce using rule 2 (a -> a l .)
    LAMBDA          reduce using rule 2 (a -> a l .)
    ZERO            reduce using rule 2 (a -> a l .)
    TRUE            reduce using rule 2 (a -> a l .)
    FALSE           reduce using rule 2 (a -> a l .)
    IF              reduce using rule 2 (a -> a l .)
    SUCC            reduce using rule 2 (a -> a l .)
    PRED            reduce using rule 2 (a -> a l .)
    ISZERO          reduce using rule 2 (a -> a l .)
    OPENBRACKET     reduce using rule 2 (a -> a l .)
    VAR             reduce using rule 2 (a -> a l .)
    THEN            reduce using rule 2 (a -> a l .)
    $end            reduce using rule 2 (a -> a l .)


state 17

    (15) e -> SUCC OPENBRACKET . a CLOSEDBRACKET
    (2) a -> . a l
    (3) a -> . l
    (4) l -> . LAMBDA v COLON t POINT l
    (5) l -> . e
    (10) e -> . ZERO
    (11) e -> . TRUE
    (12) e -> . FALSE
    (13) e -> . v
    (14) e -> . IF a THEN e ELSE e
    (15) e -> . SUCC OPENBRACKET a CLOSEDBRACKET
    (16) e -> . PRED OPENBRACKET a CLOSEDBRACKET
    (17) e -> . ISZERO OPENBRACKET a CLOSEDBRACKET
    (18) e -> . OPENBRACKET a CLOSEDBRACKET
    (19) v -> . VAR

    LAMBDA          shift and go to state 15
    ZERO            shift and go to state 6
    TRUE            shift and go to state 14
    FALSE           shift and go to state 12
    IF              shift and go to state 13
    SUCC            shift and go to state 4
    PRED            shift and go to state 8
    ISZERO          shift and go to state 11
    OPENBRACKET     shift and go to state 5
    VAR             shift and go to state 2

    a                              shift and go to state 23
    e                              shift and go to state 3
    l                              shift and go to state 7
    v                              shift and go to state 10

state 18

    (18) e -> OPENBRACKET a . CLOSEDBRACKET
    (2) a -> a . l
    (4) l -> . LAMBDA v COLON t POINT l
    (5) l -> . e
    (10) e -> . ZERO
    (11) e -> . TRUE
    (12) e -> . FALSE
    (13) e -> . v
    (14) e -> . IF a THEN e ELSE e
    (15) e -> . SUCC OPENBRACKET a CLOSEDBRACKET
    (16) e -> . PRED OPENBRACKET a CLOSEDBRACKET
    (17) e -> . ISZERO OPENBRACKET a CLOSEDBRACKET
    (18) e -> . OPENBRACKET a CLOSEDBRACKET
    (19) v -> . VAR

    CLOSEDBRACKET   shift and go to state 24
    LAMBDA          shift and go to state 15
    ZERO            shift and go to state 6
    TRUE            shift and go to state 14
    FALSE           shift and go to state 12
    IF              shift and go to state 13
    SUCC            shift and go to state 4
    PRED            shift and go to state 8
    ISZERO          shift and go to state 11
    OPENBRACKET     shift and go to state 5
    VAR             shift and go to state 2

    e                              shift and go to state 3
    l                              shift and go to state 16
    v                              shift and go to state 10

state 19

    (16) e -> PRED OPENBRACKET . a CLOSEDBRACKET
    (2) a -> . a l
    (3) a -> . l
    (4) l -> . LAMBDA v COLON t POINT l
    (5) l -> . e
    (10) e -> . ZERO
    (11) e -> . TRUE
    (12) e -> . FALSE
    (13) e -> . v
    (14) e -> . IF a THEN e ELSE e
    (15) e -> . SUCC OPENBRACKET a CLOSEDBRACKET
    (16) e -> . PRED OPENBRACKET a CLOSEDBRACKET
    (17) e -> . ISZERO OPENBRACKET a CLOSEDBRACKET
    (18) e -> . OPENBRACKET a CLOSEDBRACKET
    (19) v -> . VAR

    LAMBDA          shift and go to state 15
    ZERO            shift and go to state 6
    TRUE            shift and go to state 14
    FALSE           shift and go to state 12
    IF              shift and go to state 13
    SUCC            shift and go to state 4
    PRED            shift and go to state 8
    ISZERO          shift and go to state 11
    OPENBRACKET     shift and go to state 5
    VAR             shift and go to state 2

    a                              shift and go to state 25
    e                              shift and go to state 3
    l                              shift and go to state 7
    v                              shift and go to state 10

state 20

    (17) e -> ISZERO OPENBRACKET . a CLOSEDBRACKET
    (2) a -> . a l
    (3) a -> . l
    (4) l -> . LAMBDA v COLON t POINT l
    (5) l -> . e
    (10) e -> . ZERO
    (11) e -> . TRUE
    (12) e -> . FALSE
    (13) e -> . v
    (14) e -> . IF a THEN e ELSE e
    (15) e -> . SUCC OPENBRACKET a CLOSEDBRACKET
    (16) e -> . PRED OPENBRACKET a CLOSEDBRACKET
    (17) e -> . ISZERO OPENBRACKET a CLOSEDBRACKET
    (18) e -> . OPENBRACKET a CLOSEDBRACKET
    (19) v -> . VAR

    LAMBDA          shift and go to state 15
    ZERO            shift and go to state 6
    TRUE            shift and go to state 14
    FALSE           shift and go to state 12
    IF              shift and go to state 13
    SUCC            shift and go to state 4
    PRED            shift and go to state 8
    ISZERO          shift and go to state 11
    OPENBRACKET     shift and go to state 5
    VAR             shift and go to state 2

    a                              shift and go to state 26
    e                              shift and go to state 3
    l                              shift and go to state 7
    v                              shift and go to state 10

state 21

    (14) e -> IF a . THEN e ELSE e
    (2) a -> a . l
    (4) l -> . LAMBDA v COLON t POINT l
    (5) l -> . e
    (10) e -> . ZERO
    (11) e -> . TRUE
    (12) e -> . FALSE
    (13) e -> . v
    (14) e -> . IF a THEN e ELSE e
    (15) e -> . SUCC OPENBRACKET a CLOSEDBRACKET
    (16) e -> . PRED OPENBRACKET a CLOSEDBRACKET
    (17) e -> . ISZERO OPENBRACKET a CLOSEDBRACKET
    (18) e -> . OPENBRACKET a CLOSEDBRACKET
    (19) v -> . VAR

    THEN            shift and go to state 27
    LAMBDA          shift and go to state 15
    ZERO            shift and go to state 6
    TRUE            shift and go to state 14
    FALSE           shift and go to state 12
    IF              shift and go to state 13
    SUCC            shift and go to state 4
    PRED            shift and go to state 8
    ISZERO          shift and go to state 11
    OPENBRACKET     shift and go to state 5
    VAR             shift and go to state 2

    e                              shift and go to state 3
    l                              shift and go to state 16
    v                              shift and go to state 10

state 22

    (4) l -> LAMBDA v . COLON t POINT l

    COLON           shift and go to state 28


state 23

    (15) e -> SUCC OPENBRACKET a . CLOSEDBRACKET
    (2) a -> a . l
    (4) l -> . LAMBDA v COLON t POINT l
    (5) l -> . e
    (10) e -> . ZERO
    (11) e -> . TRUE
    (12) e -> . FALSE
    (13) e -> . v
    (14) e -> . IF a THEN e ELSE e
    (15) e -> . SUCC OPENBRACKET a CLOSEDBRACKET
    (16) e -> . PRED OPENBRACKET a CLOSEDBRACKET
    (17) e -> . ISZERO OPENBRACKET a CLOSEDBRACKET
    (18) e -> . OPENBRACKET a CLOSEDBRACKET
    (19) v -> . VAR

    CLOSEDBRACKET   shift and go to state 29
    LAMBDA          shift and go to state 15
    ZERO            shift and go to state 6
    TRUE            shift and go to state 14
    FALSE           shift and go to state 12
    IF              shift and go to state 13
    SUCC            shift and go to state 4
    PRED            shift and go to state 8
    ISZERO          shift and go to state 11
    OPENBRACKET     shift and go to state 5
    VAR             shift and go to state 2

    e                              shift and go to state 3
    l                              shift and go to state 16
    v                              shift and go to state 10

state 24

    (18) e -> OPENBRACKET a CLOSEDBRACKET .

    LAMBDA          reduce using rule 18 (e -> OPENBRACKET a CLOSEDBRACKET .)
    ZERO            reduce using rule 18 (e -> OPENBRACKET a CLOSEDBRACKET .)
    TRUE            reduce using rule 18 (e -> OPENBRACKET a CLOSEDBRACKET .)
    FALSE           reduce using rule 18 (e -> OPENBRACKET a CLOSEDBRACKET .)
    IF              reduce using rule 18 (e -> OPENBRACKET a CLOSEDBRACKET .)
    SUCC            reduce using rule 18 (e -> OPENBRACKET a CLOSEDBRACKET .)
    PRED            reduce using rule 18 (e -> OPENBRACKET a CLOSEDBRACKET .)
    ISZERO          reduce using rule 18 (e -> OPENBRACKET a CLOSEDBRACKET .)
    OPENBRACKET     reduce using rule 18 (e -> OPENBRACKET a CLOSEDBRACKET .)
    VAR             reduce using rule 18 (e -> OPENBRACKET a CLOSEDBRACKET .)
    $end            reduce using rule 18 (e -> OPENBRACKET a CLOSEDBRACKET .)
    CLOSEDBRACKET   reduce using rule 18 (e -> OPENBRACKET a CLOSEDBRACKET .)
    THEN            reduce using rule 18 (e -> OPENBRACKET a CLOSEDBRACKET .)
    ELSE            reduce using rule 18 (e -> OPENBRACKET a CLOSEDBRACKET .)


state 25

    (16) e -> PRED OPENBRACKET a . CLOSEDBRACKET
    (2) a -> a . l
    (4) l -> . LAMBDA v COLON t POINT l
    (5) l -> . e
    (10) e -> . ZERO
    (11) e -> . TRUE
    (12) e -> . FALSE
    (13) e -> . v
    (14) e -> . IF a THEN e ELSE e
    (15) e -> . SUCC OPENBRACKET a CLOSEDBRACKET
    (16) e -> . PRED OPENBRACKET a CLOSEDBRACKET
    (17) e -> . ISZERO OPENBRACKET a CLOSEDBRACKET
    (18) e -> . OPENBRACKET a CLOSEDBRACKET
    (19) v -> . VAR

    CLOSEDBRACKET   shift and go to state 30
    LAMBDA          shift and go to state 15
    ZERO            shift and go to state 6
    TRUE            shift and go to state 14
    FALSE           shift and go to state 12
    IF              shift and go to state 13
    SUCC            shift and go to state 4
    PRED            shift and go to state 8
    ISZERO          shift and go to state 11
    OPENBRACKET     shift and go to state 5
    VAR             shift and go to state 2

    e                              shift and go to state 3
    l                              shift and go to state 16
    v                              shift and go to state 10

state 26

    (17) e -> ISZERO OPENBRACKET a . CLOSEDBRACKET
    (2) a -> a . l
    (4) l -> . LAMBDA v COLON t POINT l
    (5) l -> . e
    (10) e -> . ZERO
    (11) e -> . TRUE
    (12) e -> . FALSE
    (13) e -> . v
    (14) e -> . IF a THEN e ELSE e
    (15) e -> . SUCC OPENBRACKET a CLOSEDBRACKET
    (16) e -> . PRED OPENBRACKET a CLOSEDBRACKET
    (17) e -> . ISZERO OPENBRACKET a CLOSEDBRACKET
    (18) e -> . OPENBRACKET a CLOSEDBRACKET
    (19) v -> . VAR

    CLOSEDBRACKET   shift and go to state 31
    LAMBDA          shift and go to state 15
    ZERO            shift and go to state 6
    TRUE            shift and go to state 14
    FALSE           shift and go to state 12
    IF              shift and go to state 13
    SUCC            shift and go to state 4
    PRED            shift and go to state 8
    ISZERO          shift and go to state 11
    OPENBRACKET     shift and go to state 5
    VAR             shift and go to state 2

    e                              shift and go to state 3
    l                              shift and go to state 16
    v                              shift and go to state 10

state 27

    (14) e -> IF a THEN . e ELSE e
    (10) e -> . ZERO
    (11) e -> . TRUE
    (12) e -> . FALSE
    (13) e -> . v
    (14) e -> . IF a THEN e ELSE e
    (15) e -> . SUCC OPENBRACKET a CLOSEDBRACKET
    (16) e -> . PRED OPENBRACKET a CLOSEDBRACKET
    (17) e -> . ISZERO OPENBRACKET a CLOSEDBRACKET
    (18) e -> . OPENBRACKET a CLOSEDBRACKET
    (19) v -> . VAR

    ZERO            shift and go to state 6
    TRUE            shift and go to state 14
    FALSE           shift and go to state 12
    IF              shift and go to state 13
    SUCC            shift and go to state 4
    PRED            shift and go to state 8
    ISZERO          shift and go to state 11
    OPENBRACKET     shift and go to state 5
    VAR             shift and go to state 2

    e                              shift and go to state 32
    v                              shift and go to state 10

state 28

    (4) l -> LAMBDA v COLON . t POINT l
    (6) t -> . BOOL f
    (7) t -> . NAT f

    BOOL            shift and go to state 35
    NAT             shift and go to state 34

    t                              shift and go to state 33

state 29

    (15) e -> SUCC OPENBRACKET a CLOSEDBRACKET .

    LAMBDA          reduce using rule 15 (e -> SUCC OPENBRACKET a CLOSEDBRACKET .)
    ZERO            reduce using rule 15 (e -> SUCC OPENBRACKET a CLOSEDBRACKET .)
    TRUE            reduce using rule 15 (e -> SUCC OPENBRACKET a CLOSEDBRACKET .)
    FALSE           reduce using rule 15 (e -> SUCC OPENBRACKET a CLOSEDBRACKET .)
    IF              reduce using rule 15 (e -> SUCC OPENBRACKET a CLOSEDBRACKET .)
    SUCC            reduce using rule 15 (e -> SUCC OPENBRACKET a CLOSEDBRACKET .)
    PRED            reduce using rule 15 (e -> SUCC OPENBRACKET a CLOSEDBRACKET .)
    ISZERO          reduce using rule 15 (e -> SUCC OPENBRACKET a CLOSEDBRACKET .)
    OPENBRACKET     reduce using rule 15 (e -> SUCC OPENBRACKET a CLOSEDBRACKET .)
    VAR             reduce using rule 15 (e -> SUCC OPENBRACKET a CLOSEDBRACKET .)
    $end            reduce using rule 15 (e -> SUCC OPENBRACKET a CLOSEDBRACKET .)
    CLOSEDBRACKET   reduce using rule 15 (e -> SUCC OPENBRACKET a CLOSEDBRACKET .)
    THEN            reduce using rule 15 (e -> SUCC OPENBRACKET a CLOSEDBRACKET .)
    ELSE            reduce using rule 15 (e -> SUCC OPENBRACKET a CLOSEDBRACKET .)


state 30

    (16) e -> PRED OPENBRACKET a CLOSEDBRACKET .

    LAMBDA          reduce using rule 16 (e -> PRED OPENBRACKET a CLOSEDBRACKET .)
    ZERO            reduce using rule 16 (e -> PRED OPENBRACKET a CLOSEDBRACKET .)
    TRUE            reduce using rule 16 (e -> PRED OPENBRACKET a CLOSEDBRACKET .)
    FALSE           reduce using rule 16 (e -> PRED OPENBRACKET a CLOSEDBRACKET .)
    IF              reduce using rule 16 (e -> PRED OPENBRACKET a CLOSEDBRACKET .)
    SUCC            reduce using rule 16 (e -> PRED OPENBRACKET a CLOSEDBRACKET .)
    PRED            reduce using rule 16 (e -> PRED OPENBRACKET a CLOSEDBRACKET .)
    ISZERO          reduce using rule 16 (e -> PRED OPENBRACKET a CLOSEDBRACKET .)
    OPENBRACKET     reduce using rule 16 (e -> PRED OPENBRACKET a CLOSEDBRACKET .)
    VAR             reduce using rule 16 (e -> PRED OPENBRACKET a CLOSEDBRACKET .)
    $end            reduce using rule 16 (e -> PRED OPENBRACKET a CLOSEDBRACKET .)
    CLOSEDBRACKET   reduce using rule 16 (e -> PRED OPENBRACKET a CLOSEDBRACKET .)
    THEN            reduce using rule 16 (e -> PRED OPENBRACKET a CLOSEDBRACKET .)
    ELSE            reduce using rule 16 (e -> PRED OPENBRACKET a CLOSEDBRACKET .)


state 31

    (17) e -> ISZERO OPENBRACKET a CLOSEDBRACKET .

    LAMBDA          reduce using rule 17 (e -> ISZERO OPENBRACKET a CLOSEDBRACKET .)
    ZERO            reduce using rule 17 (e -> ISZERO OPENBRACKET a CLOSEDBRACKET .)
    TRUE            reduce using rule 17 (e -> ISZERO OPENBRACKET a CLOSEDBRACKET .)
    FALSE           reduce using rule 17 (e -> ISZERO OPENBRACKET a CLOSEDBRACKET .)
    IF              reduce using rule 17 (e -> ISZERO OPENBRACKET a CLOSEDBRACKET .)
    SUCC            reduce using rule 17 (e -> ISZERO OPENBRACKET a CLOSEDBRACKET .)
    PRED            reduce using rule 17 (e -> ISZERO OPENBRACKET a CLOSEDBRACKET .)
    ISZERO          reduce using rule 17 (e -> ISZERO OPENBRACKET a CLOSEDBRACKET .)
    OPENBRACKET     reduce using rule 17 (e -> ISZERO OPENBRACKET a CLOSEDBRACKET .)
    VAR             reduce using rule 17 (e -> ISZERO OPENBRACKET a CLOSEDBRACKET .)
    $end            reduce using rule 17 (e -> ISZERO OPENBRACKET a CLOSEDBRACKET .)
    CLOSEDBRACKET   reduce using rule 17 (e -> ISZERO OPENBRACKET a CLOSEDBRACKET .)
    THEN            reduce using rule 17 (e -> ISZERO OPENBRACKET a CLOSEDBRACKET .)
    ELSE            reduce using rule 17 (e -> ISZERO OPENBRACKET a CLOSEDBRACKET .)


state 32

    (14) e -> IF a THEN e . ELSE e

    ELSE            shift and go to state 36


state 33

    (4) l -> LAMBDA v COLON t . POINT l

    POINT           shift and go to state 37


state 34

    (7) t -> NAT . f
    (8) f -> . ARROW t
    (9) f -> .

    ARROW           shift and go to state 38
    POINT           reduce using rule 9 (f -> .)

    f                              shift and go to state 39

state 35

    (6) t -> BOOL . f
    (8) f -> . ARROW t
    (9) f -> .

    ARROW           shift and go to state 38
    POINT           reduce using rule 9 (f -> .)

    f                              shift and go to state 40

state 36

    (14) e -> IF a THEN e ELSE . e
    (10) e -> . ZERO
    (11) e -> . TRUE
    (12) e -> . FALSE
    (13) e -> . v
    (14) e -> . IF a THEN e ELSE e
    (15) e -> . SUCC OPENBRACKET a CLOSEDBRACKET
    (16) e -> . PRED OPENBRACKET a CLOSEDBRACKET
    (17) e -> . ISZERO OPENBRACKET a CLOSEDBRACKET
    (18) e -> . OPENBRACKET a CLOSEDBRACKET
    (19) v -> . VAR

    ZERO            shift and go to state 6
    TRUE            shift and go to state 14
    FALSE           shift and go to state 12
    IF              shift and go to state 13
    SUCC            shift and go to state 4
    PRED            shift and go to state 8
    ISZERO          shift and go to state 11
    OPENBRACKET     shift and go to state 5
    VAR             shift and go to state 2

    e                              shift and go to state 41
    v                              shift and go to state 10

state 37

    (4) l -> LAMBDA v COLON t POINT . l
    (4) l -> . LAMBDA v COLON t POINT l
    (5) l -> . e
    (10) e -> . ZERO
    (11) e -> . TRUE
    (12) e -> . FALSE
    (13) e -> . v
    (14) e -> . IF a THEN e ELSE e
    (15) e -> . SUCC OPENBRACKET a CLOSEDBRACKET
    (16) e -> . PRED OPENBRACKET a CLOSEDBRACKET
    (17) e -> . ISZERO OPENBRACKET a CLOSEDBRACKET
    (18) e -> . OPENBRACKET a CLOSEDBRACKET
    (19) v -> . VAR

    LAMBDA          shift and go to state 15
    ZERO            shift and go to state 6
    TRUE            shift and go to state 14
    FALSE           shift and go to state 12
    IF              shift and go to state 13
    SUCC            shift and go to state 4
    PRED            shift and go to state 8
    ISZERO          shift and go to state 11
    OPENBRACKET     shift and go to state 5
    VAR             shift and go to state 2

    e                              shift and go to state 3
    l                              shift and go to state 42
    v                              shift and go to state 10

state 38

    (8) f -> ARROW . t
    (6) t -> . BOOL f
    (7) t -> . NAT f

    BOOL            shift and go to state 35
    NAT             shift and go to state 34

    t                              shift and go to state 43

state 39

    (7) t -> NAT f .

    POINT           reduce using rule 7 (t -> NAT f .)


state 40

    (6) t -> BOOL f .

    POINT           reduce using rule 6 (t -> BOOL f .)


state 41

    (14) e -> IF a THEN e ELSE e .

    LAMBDA          reduce using rule 14 (e -> IF a THEN e ELSE e .)
    ZERO            reduce using rule 14 (e -> IF a THEN e ELSE e .)
    TRUE            reduce using rule 14 (e -> IF a THEN e ELSE e .)
    FALSE           reduce using rule 14 (e -> IF a THEN e ELSE e .)
    IF              reduce using rule 14 (e -> IF a THEN e ELSE e .)
    SUCC            reduce using rule 14 (e -> IF a THEN e ELSE e .)
    PRED            reduce using rule 14 (e -> IF a THEN e ELSE e .)
    ISZERO          reduce using rule 14 (e -> IF a THEN e ELSE e .)
    OPENBRACKET     reduce using rule 14 (e -> IF a THEN e ELSE e .)
    VAR             reduce using rule 14 (e -> IF a THEN e ELSE e .)
    $end            reduce using rule 14 (e -> IF a THEN e ELSE e .)
    CLOSEDBRACKET   reduce using rule 14 (e -> IF a THEN e ELSE e .)
    THEN            reduce using rule 14 (e -> IF a THEN e ELSE e .)
    ELSE            reduce using rule 14 (e -> IF a THEN e ELSE e .)


state 42

    (4) l -> LAMBDA v COLON t POINT l .

    LAMBDA          reduce using rule 4 (l -> LAMBDA v COLON t POINT l .)
    ZERO            reduce using rule 4 (l -> LAMBDA v COLON t POINT l .)
    TRUE            reduce using rule 4 (l -> LAMBDA v COLON t POINT l .)
    FALSE           reduce using rule 4 (l -> LAMBDA v COLON t POINT l .)
    IF              reduce using rule 4 (l -> LAMBDA v COLON t POINT l .)
    SUCC            reduce using rule 4 (l -> LAMBDA v COLON t POINT l .)
    PRED            reduce using rule 4 (l -> LAMBDA v COLON t POINT l .)
    ISZERO          reduce using rule 4 (l -> LAMBDA v COLON t POINT l .)
    OPENBRACKET     reduce using rule 4 (l -> LAMBDA v COLON t POINT l .)
    VAR             reduce using rule 4 (l -> LAMBDA v COLON t POINT l .)
    $end            reduce using rule 4 (l -> LAMBDA v COLON t POINT l .)
    CLOSEDBRACKET   reduce using rule 4 (l -> LAMBDA v COLON t POINT l .)
    THEN            reduce using rule 4 (l -> LAMBDA v COLON t POINT l .)


state 43

    (8) f -> ARROW t .

    POINT           reduce using rule 8 (f -> ARROW t .)

